# its_helpdesk_bot.py
# –ò–¢–°-–±–æ—Ç —Å —Ä–æ–ª—è–º–∏ (–∞–¥–º–∏–Ω/–º–µ—Ö–∞–Ω–∏–∫), –≥–æ—Ä—è—á–∏–º–∏ –∫–ª–∞–≤–∏—à–∞–º–∏,
# —Ä–µ–º–æ–Ω—Ç—ã/–ø–æ–∫—É–ø–∫–∏, –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏,
# —É—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ (start/done/–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å),
# –∂—É—Ä–Ω–∞–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º, –∫–Ω–æ–ø–∫–∞ "–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç".
# –¢—Ä–µ–±—É–µ—Ç—Å—è: python-telegram-bot==20.7, aiosqlite

import os, asyncio, aiosqlite, csv, io
from datetime import datetime, timedelta
from typing import Optional, Dict, Tuple
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile,
    ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# ---------- –∫–æ–Ω—Ñ–∏–≥ ----------
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
ADMIN_IDS = set(map(int, filter(None, os.getenv("ADMIN_IDS", "").split(","))))
TECH_IDS  = set(map(int, filter(None, os.getenv("TECH_IDS",  "").split(","))))
DB_PATH = "tickets.db"

def now_iso() -> str:
    return datetime.utcnow().isoformat(timespec="seconds")

def parse_iso(s: Optional[str]) -> Optional[datetime]:
    if not s: return None
    return datetime.fromisoformat(s)

def human_duration(start: Optional[str], end: Optional[str]) -> str:
    st, en = parse_iso(start), parse_iso(end) or datetime.utcnow()
    if not st: return "‚Äî"
    delta = en - st
    d = delta.days
    s = delta.seconds
    h = s // 3600
    m = (s % 3600) // 60
    parts = []
    if d: parts.append(f"{d}–¥")
    if h: parts.append(f"{h}—á")
    if m or not parts: parts.append(f"{m}–º")
    return " ".join(parts)

def is_admin(uid:int) -> bool: return uid in ADMIN_IDS
def is_tech(uid:int)  -> bool: return uid in TECH_IDS

# –æ–∂–∏–¥–∞–Ω–∏—è
PENDING_REASON: Dict[int, Tuple[str,int]] = {}  # admin_id -> (action, ticket_id)
PENDING_NEW:    Dict[int, str]            = {}  # user_id  -> "repair"|"purchase"

# ---------- –ë–î ----------
CREATE_SQL = """
CREATE TABLE IF NOT EXISTS tickets (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  kind TEXT CHECK(kind IN ('repair','purchase')) DEFAULT 'repair',
  status TEXT DEFAULT 'new',
  priority TEXT DEFAULT 'normal',
  chat_id INTEGER,
  user_id INTEGER,
  username TEXT,
  description TEXT,
  photo_file_id TEXT,
  assignee_id INTEGER,
  assignee_name TEXT,
  created_at TEXT,
  updated_at TEXT,
  started_at TEXT,
  done_at TEXT
);
CREATE INDEX IF NOT EXISTS idx_tickets_kind   ON tickets(kind);
CREATE INDEX IF NOT EXISTS idx_tickets_status ON tickets(status);
CREATE INDEX IF NOT EXISTS idx_tickets_user   ON tickets(user_id);
"""

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.executescript(CREATE_SQL)
        await db.commit()

async def add_ticket(kind:str, chat_id:int, user_id:int, username:str,
                     description:str, status:str="new",
                     priority:str="normal", photo_id:Optional[str]=None) -> int:
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO tickets(kind,status,priority,chat_id,user_id,username,description,photo_file_id,created_at,updated_at,started_at,done_at)"
            "VALUES(?,?,?,?,?,?,?,?,?,?,?,?)",
            (kind, status, priority, chat_id, user_id, username or "", description, photo_id, now_iso(), now_iso(), None, None)
        )
        await db.commit()
        cur = await db.execute("SELECT last_insert_rowid()")
        (tid,) = await cur.fetchone()
        return tid

async def get_ticket(tid:int):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT * FROM tickets WHERE id=?", (tid,))
        return await cur.fetchone()

async def update_ticket(tid:int, **fields):
    if not fields: return
    cols, params = [], []
    for k,v in fields.items():
        cols.append(f"{k}=?"); params.append(v)
    cols.append("updated_at=?"); params.append(now_iso())
    params.append(tid)
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(f"UPDATE tickets SET {', '.join(cols)} WHERE id=?", params)
        await db.commit()

async def find_tickets(kind:Optional[str]=None, status:Optional[str]=None,
                       user_id:Optional[int]=None, phrase:Optional[str]=None,
                       limit:int=50):
    q, p = "SELECT * FROM tickets WHERE 1=1", []
    if kind:   q += " AND kind=?";    p.append(kind)
    if status: q += " AND status=?";  p.append(status)
    if user_id:q += " AND user_id=?"; p.append(user_id)
    if phrase: q += " AND description LIKE ?"; p.append(f"%{phrase}%")
    q += " ORDER BY id DESC LIMIT ?"; p.append(limit)
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(q,p)
        return await cur.fetchall()

# ---------- —Ñ–æ—Ä–º–∞—Ç/–∫–Ω–æ–ø–∫–∏ ----------
def fmt_ticket(row) -> str:
    (id, kind, status, prio, chat_id, user_id, username,
     descr, photo_id, assignee_id, assignee_name, created_at, updated_at,
     started_at, done_at) = row
    kinds = {"repair":"üõ† –†–µ–º–æ–Ω—Ç", "purchase":"üõí –ü–æ–∫—É–ø–∫–∞"}
    statuses = {
        "new":"üÜï –ù–æ–≤–∞—è", "in_work":"üîß –í —Ä–∞–±–æ—Ç–µ", "done":"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞",
        "canceled":"üö´ –û—Ç–º–µ–Ω–µ–Ω–∞", "approved":"‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞", "rejected":"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
    }
    pr = {"low":"üü¢","normal":"üü°","high":"üî¥"}.get(prio,"üü°")
    lines = [
        f"{kinds.get(kind,kind)} ‚Ññ{id} ‚Ä¢ {statuses.get(status,status)} ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {pr}",
        f"üë§ @{username or user_id}",
        f"üìù {descr}",
        f"üïí –°–æ–∑–¥–∞–Ω–∞: {created_at.replace('T',' ')}"
    ]
    if kind == "repair":
        if started_at: lines.append(f"üîß –í–∑—è—Ç–∞: {started_at.replace('T',' ')}")
        if done_at:    lines.append(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {done_at.replace('T',' ')}")
        if started_at: lines.append(f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {human_duration(started_at, done_at)}")
    if assignee_id:
        lines.append(f"üë®‚Äçüîß –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee_name or assignee_id}")
    return "\n".join(lines)

def kb_repair(tid:int, admin:bool, is_assignee:bool, tech:bool=False) -> InlineKeyboardMarkup:
    rows = []
    if admin:
        rows.append([
            InlineKeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±–µ", callback_data=f"assign:{tid}"),
            InlineKeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ—Ö–∞–Ω–∏–∫—É", callback_data=f"assign_menu:{tid}")
        ])
    if admin or is_assignee or tech:
        rows.append([
            InlineKeyboardButton("–í —Ä–∞–±–æ—Ç—É",  callback_data=f"to_work:{tid}"),
            InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done:{tid}")
        ])
    if admin:
        rows.append([
            InlineKeyboardButton("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Üë", callback_data=f"prio_up:{tid}"),
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å (—Å –ø—Ä–∏—á–∏–Ω–æ–π)", callback_data=f"cancel_with_reason:{tid}")
        ])
    return InlineKeyboardMarkup(rows)

def kb_assign_list(tid:int) -> InlineKeyboardMarkup:
    buttons, row = [], []
    for uid in sorted(TECH_IDS):
        label = f"–ù–∞–∑–Ω–∞—á–∏—Ç—å ID{uid}"
        row.append(InlineKeyboardButton(label, callback_data=f"assign_to:{tid}:{uid}"))
        if len(row) == 2:
            buttons.append(row); row = []
    if row: buttons.append(row)
    buttons.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"assign_back:{tid}")])
    return InlineKeyboardMarkup(buttons)

def kb_purchase_admin(tid:int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{tid}"),
         InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å (—Å –ø—Ä–∏—á–∏–Ω–æ–π)", callback_data=f"reject_with_reason_{tid}")]
    ])

# ---------- –∫–æ–º–∞–Ω–¥—ã ----------
async def cmd_start(u:Update, c:ContextTypes.DEFAULT_TYPE):
    uid = u.effective_user.id
    isadm, istec = is_admin(uid), is_tech(uid)
    kb = [
        [KeyboardButton("üõ† –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"), KeyboardButton("üßæ –ú–æ–∏ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton("üõí –ü–æ–∫—É–ø–∫–∞")],
        [KeyboardButton("üõ† –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç")]
    ]
    if isadm:
        kb.append([KeyboardButton("üõí –ü–æ–∫—É–ø–∫–∏")])
        kb.append([KeyboardButton("üìì –ñ—É—Ä–Ω–∞–ª")])
    reply_kb = ReplyKeyboardMarkup(kb, resize_keyboard=True)

    await u.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç —ç—Ç–æ —Ä–æ–±–æ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Å–ª—É–∂–±—ã",
        reply_markup=reply_kb
    )

async def cmd_my(u:Update, c:ContextTypes.DEFAULT_TYPE):
    rows = await find_tickets(user_id=u.effective_user.id, limit=20)
    if not rows:
        await u.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫."); return
    await u.message.reply_text("\n\n".join(map(fmt_ticket, rows)))

async def cmd_new(u:Update, c:ContextTypes.DEFAULT_TYPE):
    if not c.args:
        await u.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /new <–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã>")
        return
    descr = " ".join(c.args)
    tid = await add_ticket("repair", u.effective_chat.id, u.effective_user.id, u.effective_user.username, descr)
    await u.message.reply_text(f"üõ† –ó–∞—è–≤–∫–∞ ‚Ññ{tid} —Å–æ–∑–¥–∞–Ω–∞.")
    for aid in ADMIN_IDS:
        try: await c.bot.send_message(aid, f"üõ† –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{tid}\n{descr}")
        except: pass

async def any_photo(u:Update, c:ContextTypes.DEFAULT_TYPE):
    if not u.message.caption or u.message.caption.startswith("/"):
        await u.message.reply_text("–î–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ (–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã).")
        return
    photo_id = u.message.photo[-1].file_id
    tid = await add_ticket("repair", u.effective_chat.id, u.effective_user.id, u.effective_user.username, u.message.caption, photo_id=photo_id)
    await u.message.reply_text(f"üõ† –ó–∞—è–≤–∫–∞ —Å —Ñ–æ—Ç–æ ‚Ññ{tid} —Å–æ–∑–¥–∞–Ω–∞.")
    for aid in ADMIN_IDS:
        try: await c.bot.send_message(aid, f"üõ† –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{tid}\n{u.message.caption}")
        except: pass

async def cmd_buy(u:Update, c:ContextTypes.DEFAULT_TYPE):
    if not c.args:
        await u.message.reply_text("–ù–∞–ø–∏—à–∏: /buy <—á—Ç–æ –∫—É–ø–∏—Ç—å –∏ –¥–ª—è —á–µ–≥–æ>")
        return
    descr = " ".join(c.args)
    tid = await add_ticket("purchase", u.effective_chat.id, u.effective_user.id, u.effective_user.username, descr)
    await u.message.reply_text(f"üõí –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É ‚Ññ{tid} —Å–æ–∑–¥–∞–Ω–∞. –û–∂–∏–¥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è.")
    for aid in ADMIN_IDS:
        try:
            await c.bot.send_message(aid,
                f"üõí –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É ‚Ññ{tid}\n–û—Ç @{u.effective_user.username or u.effective_user.id}\n‚Äî {descr}",
                reply_markup=kb_purchase_admin(tid))
        except: pass

async def cmd_repairs(u:Update, c:ContextTypes.DEFAULT_TYPE):
    """–ö–Ω–æ–ø–∫–∞ '–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç':
       - –ê–¥–º–∏–Ω: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Ä–µ–º–æ–Ω—Ç—ã (status=new) —Å –∫–Ω–æ–ø–∫–∞–º–∏
       - –ú–µ—Ö–∞–Ω–∏–∫: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–∏ '–≤ —Ä–∞–±–æ—Ç–µ' (status=in_work, assignee=–æ–Ω)
    """
    uid = u.effective_user.id
    if is_admin(uid):
        rows = await find_tickets(kind="repair", status="new", limit=20)
        if not rows: await u.message.reply_text("–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–º–æ–Ω—Ç –Ω–µ—Ç."); return
        for r in rows:
            await u.message.reply_text(fmt_ticket(r), reply_markup=kb_repair(r[0], True, False, tech=False))
    elif is_tech(uid):
        async with aiosqlite.connect(DB_PATH) as db:
            cur = await db.execute(
                "SELECT * FROM tickets WHERE kind='repair' AND status='in_work' AND assignee_id=? ORDER BY id DESC LIMIT 20",
                (uid,)
            )
            rows = await cur.fetchall()
        if not rows: await u.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ '–≤ —Ä–∞–±–æ—Ç–µ'."); return
        for r in rows:
            await u.message.reply_text(fmt_ticket(r), reply_markup=kb_repair(r[0], False, True, tech=True))
    else:
        await u.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

async def cmd_purchases(u:Update, c:ContextTypes.DEFAULT_TYPE):
    if not is_admin(u.effective_user.id): return
    rows = await find_tickets(kind="purchase", status="new", limit=20)
    if not rows: await u.message.reply_text("–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É –Ω–µ—Ç."); return
    for r in rows:
        await u.message.reply_text(fmt_ticket(r), reply_markup=kb_purchase_admin(r[0]))

async def cmd_find(u:Update, c:ContextTypes.DEFAULT_TYPE):
    if not is_admin(u.effective_user.id): return
    if not c.args:
        await u.message.reply_text("–ü–æ–∏—Å–∫: /find <—Ç–µ–∫—Å—Ç> –∏–ª–∏ /find #<id>")
        return
    q = " ".join(c.args)
    if q.startswith("#") and q[1:].isdigit():
        row = await get_ticket(int(q[1:]))
        await u.message.reply_text(fmt_ticket(row) if row else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    rows = await find_tickets(phrase=q, limit=20)
    await u.message.reply_text("\n\n".join(map(fmt_ticket, rows)) if rows else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ.")

async def cmd_export(u:Update, c:ContextTypes.DEFAULT_TYPE):
    if not is_admin(u.effective_user.id): return
    period = (c.args[0] if c.args else "week").lower()
    since  = datetime.utcnow() - (timedelta(days=7) if period=="week" else timedelta(days=30))
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT * FROM tickets WHERE created_at>=? ORDER BY id", (since.isoformat(timespec='seconds'),))
        rows = await cur.fetchall()
    if not rows: await u.message.reply_text("–ó–∞ –ø–µ—Ä–∏–æ–¥ –∑–∞—è–≤–æ–∫ –Ω–µ—Ç."); return
    buf = io.StringIO()
    w = csv.writer(buf, delimiter=';')
    w.writerow(["id","kind","status","priority","user_id","username","description","assignee","created_at","started_at","done_at","duration"])
    for r in rows:
        duration = human_duration(r[13], r[14]) if r[1]=="repair" else ""
        w.writerow([r[0], r[1], r[2], r[3], r[5], r[6], r[7], r[10] or "", r[11], r[13] or "", r[14] or "", duration])
    buf.seek(0)
    await u.message.reply_document(document=InputFile(io.BytesIO(buf.getvalue().encode('utf-8')), filename=f"its_export_{period}.csv"),
                                   caption=f"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞ {period}")

async def cmd_journal(u:Update, c:ContextTypes.DEFAULT_TYPE):
    """–ñ—É—Ä–Ω–∞–ª: –∫–∞–∫–∞—è –∑–∞—è–≤–∫–∞, —Ç–µ–∫—Å—Ç, –∫—Ç–æ –≤–∑—è–ª, –≤—Ä–µ–º—è –≤–∑—è—Ç–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    if not is_admin(u.effective_user.id): return
    days = 30
    if c.args and c.args[0].isdigit(): days = max(1, min(365, int(c.args[0])))
    since = datetime.utcnow() - timedelta(days=days)
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "SELECT id,description,assignee_name,started_at,done_at FROM tickets "
            "WHERE kind='repair' AND status='done' AND created_at>=? "
            "ORDER BY id DESC LIMIT 200",
            (since.isoformat(timespec='seconds'),)
        )
        rows = await cur.fetchall()
    if not rows: await u.message.reply_text(f"–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ {days} –¥–Ω. –Ω–µ—Ç."); return
    lines = [f"üßæ –ñ—É—Ä–Ω–∞–ª (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(rows)}):"]
    for (tid, descr, assignee, started, done) in rows:
        dur = human_duration(started, done)
        lines.append(f"#{tid} ‚Ä¢ üë®‚Äçüîß {assignee or '‚Äî'} ‚Ä¢ üîß {str(started).replace('T',' ') if started else '‚Äî'} ‚Üí ‚úÖ {str(done).replace('T',' ') if done else '‚Äî'} ‚Ä¢ ‚åõ {dur}\n‚Äî {descr}")
    chunk, chunks = "", []
    for ln in lines:
        if len(chunk)+len(ln)+1 > 3800:
            chunks.append(chunk); chunk=""
        chunk += ln+"\n"
    if chunk: chunks.append(chunk)
    for part in chunks:
        await u.message.reply_text(part)

# ---------- —Ç–µ–∫—Å—Ç / –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ ----------
async def any_text(u:Update, c:ContextTypes.DEFAULT_TYPE):
    uid = u.effective_user.id
    text = (u.message.text or "").strip()

    # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    if text in ("üõ† –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", "üßæ –ú–æ–∏ –∑–∞—è–≤–∫–∏", "üõí –ü–æ–∫—É–ø–∫–∞", "üõ† –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç", "üõí –ü–æ–∫—É–ø–∫–∏", "üìì –ñ—É—Ä–Ω–∞–ª"):
        if text == "üõ† –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞":
            PENDING_NEW[uid] = "repair"
            await u.message.reply_text("–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —Å–æ–∑–¥–∞–º –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç."); return
        if text == "üõí –ü–æ–∫—É–ø–∫–∞":
            PENDING_NEW[uid] = "purchase"
            await u.message.reply_text("–ù–∞–ø–∏—à–∏, —á—Ç–æ –∫—É–ø–∏—Ç—å –∏ –¥–ª—è —á–µ–≥–æ ‚Äî —Å–æ–∑–¥–∞–º –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É."); return
        if text == "üßæ –ú–æ–∏ –∑–∞—è–≤–∫–∏":
            await cmd_my(u,c); return
        if text == "üõ† –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç":
            await cmd_repairs(u,c); return
        if text == "üõí –ü–æ–∫—É–ø–∫–∏":
            if is_admin(uid): await cmd_purchases(u,c)
            else: await u.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤."); return
        if text == "üìì –ñ—É—Ä–Ω–∞–ª":
            if is_admin(uid): await cmd_journal(u,c)
            else: await u.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤."); return

    # –ü—Ä–∏—á–∏–Ω—ã (–æ—Ç–º–µ–Ω–∞/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ) ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
    if is_admin(uid) and uid in PENDING_REASON:
        action, tid = PENDING_REASON.pop(uid)
        reason = text
        if not reason:
            await u.message.reply_text("–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω—ã.")
            PENDING_REASON[uid]=(action, tid); return
        if action == "reject_purchase":
            await update_ticket(tid, status="rejected")
            await u.message.reply_text(f"üõí –ó–∞—è–≤–∫–∞ ‚Ññ{tid} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        elif action == "cancel_repair":
            await update_ticket(tid, status="canceled")
            await u.message.reply_text(f"üõ† –ó–∞—è–≤–∫–∞ ‚Ññ{tid} –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        row = await get_ticket(tid)
        if row:
            author_id = row[5]
            note = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå" if action=="reject_purchase" else "–æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå"
            try: await c.bot.send_message(author_id, f"‚ÑπÔ∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{tid} {note}. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            except: pass
        return

    # –û–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è ¬´–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞/–ü–æ–∫—É–ø–∫–∞¬ª
    if uid in PENDING_NEW:
        mode = PENDING_NEW.pop(uid)
        if mode == "repair":
            tid = await add_ticket("repair", u.effective_chat.id, uid, u.effective_user.username, text)
            await u.message.reply_text(f"üõ† –ó–∞—è–≤–∫–∞ ‚Ññ{tid} —Å–æ–∑–¥–∞–Ω–∞.")
            for aid in ADMIN_IDS:
                try: await c.bot.send_message(aid, f"üõ† –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{tid}\n{text}")
                except: pass
            return
        else:
            tid = await add_ticket("purchase", u.effective_chat.id, uid, u.effective_user.username, text)
            await u.message.reply_text(f"üõí –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É ‚Ññ{tid} —Å–æ–∑–¥–∞–Ω–∞. –û–∂–∏–¥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è.")
            for aid in ADMIN_IDS:
                try:
                    await c.bot.send_message(aid,
                        f"üõí –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É ‚Ññ{tid}\n–û—Ç @{u.effective_user.username or uid}\n‚Äî {text}",
                        reply_markup=kb_purchase_admin(tid))
                except: pass
            return

    # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Üí –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç
    if not text or text.startswith("/"):
        return
    tid = await add_ticket("repair", u.effective_chat.id, uid, u.effective_user.username, text)
    await u.message.reply_text(f"üõ† –ó–∞—è–≤–∫–∞ ‚Ññ{tid} —Å–æ–∑–¥–∞–Ω–∞.")
    for aid in ADMIN_IDS:
        try: await c.bot.send_message(aid, f"üõ† –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{tid}\n{text}")
        except: pass

# ---------- –∫–Ω–æ–ø–∫–∏ ----------
async def on_btn(u:Update, c:ContextTypes.DEFAULT_TYPE):
    q = u.callback_query
    await q.answer()
    data = q.data

    # –ú–µ–Ω—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∫—É
    if data.startswith("assign_menu:"):
        tid = int(data.split(":")[1])
        if not is_admin(q.from_user.id):
            await q.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True); return
        try: await q.edit_message_reply_markup(reply_markup=kb_assign_list(tid))
        except: await q.message.reply_text("–í—ã–±–µ—Ä–∏ –º–µ—Ö–∞–Ω–∏–∫–∞:", reply_markup=kb_assign_list(tid))
        return

    if data.startswith("assign_back:"):
        tid = int(data.split(":")[1])
        if not is_admin(q.from_user.id):
            await q.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True); return
        row = await get_ticket(tid)
        if row:
            is_assignee = (row[9] == q.from_user.id)
            try:
                await q.edit_message_reply_markup(
                    reply_markup=kb_repair(tid, True, is_assignee, tech=False)
                )
            except:
                await q.message.reply_text(fmt_ticket(row),
                    reply_markup=kb_repair(tid, True, is_assignee, tech=False))
        return

    if data.startswith("assign_to:"):
        _, tid_s, uid_s = data.split(":")
        tid = int(tid_s); who = int(uid_s)
        if not is_admin(q.from_user.id):
            await q.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True); return
        await update_ticket(tid, assignee_id=who, assignee_name=str(who))
        row = await get_ticket(tid)
        try:
            await q.edit_message_text(fmt_ticket(row),
                reply_markup=kb_repair(tid, True, is_assignee=False, tech=False))
        except:
            await q.message.reply_text(fmt_ticket(row),
                reply_markup=kb_repair(tid, True, is_assignee=False, tech=False))
        try: await c.bot.send_message(who, f"üîî –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{tid}")
        except: pass
        return

    # –ü–æ–∫—É–ø–∫–∏: –æ–¥–æ–±—Ä–∏—Ç—å / –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Å –ø—Ä–∏—á–∏–Ω–æ–π
    if data.startswith("approve_") or data.startswith("reject_with_reason_"):
        tid = int(data.rsplit("_", 1)[1])
        if data.startswith("approve_"):
            if not is_admin(q.from_user.id):
                await q.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True); return
            await update_ticket(tid, status="approved")
            try: await q.edit_message_text(f"üõí –ó–∞—è–≤–∫–∞ ‚Ññ{tid} –æ–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ")
            except: pass
            row = await get_ticket(tid)
            if row:
                try: await c.bot.send_message(row[5], f"üõí –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{tid} –æ–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ")
                except: pass
            return
        else:
            if not is_admin(q.from_user.id):
                await q.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True); return
            PENDING_REASON[q.from_user.id] = ("reject_purchase", tid)
            try: await q.edit_message_text(f"üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ ‚Ññ{tid} –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
            except: pass
            return

    # –†–µ–º–æ–Ω—Ç—ã
    try:
        action, sid = data.split(":")
        tid = int(sid)
    except:
        return
    row = await get_ticket(tid)
    if not row:
        try: await q.edit_message_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except: pass
        return

    uid = q.from_user.id
    admin = is_admin(uid)
    assignee_uid = row[9]
    is_assignee = (assignee_uid == uid)

    if action == "assign" and admin:
        await update_ticket(tid, assignee_id=uid, assignee_name=q.from_user.full_name)
        row = await get_ticket(tid)
        try:
            await q.edit_message_text(fmt_ticket(row),
                reply_markup=kb_repair(tid, True, True, tech=False))
        except: pass
        return

    if action == "to_work" and (admin or is_assignee or is_tech(uid)):
        updates = {"status": "in_work"}
        if assignee_uid is None and is_tech(uid):
            updates["assignee_id"] = uid
            updates["assignee_name"] = q.from_user.full_name
        started_at = row[13] or now_iso()
        updates["started_at"] = started_at
        await update_ticket(tid, **updates)
        row = await get_ticket(tid)
        try:
            await q.edit_message_text(
                fmt_ticket(row),
                reply_markup=kb_repair(tid, admin, is_assignee=(row[9]==uid), tech=is_tech(uid))
            )
        except: pass
        return

    if action == "done" and (admin or is_assignee or is_tech(uid)):
        if assignee_uid is not None and assignee_uid != uid and not admin:
            await q.answer("–ó–∞–∫—Ä—ã—Ç—å –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω", show_alert=True); return
        done_at = row[14] or now_iso()
        await update_ticket(tid, status="done", done_at=done_at)
        row = await get_ticket(tid)
        try: await q.edit_message_text(fmt_ticket(row))
        except: pass
        return

    if action == "prio_up" and admin:
        new = {"low":"normal","normal":"high","high":"high"}[row[3]]
        await update_ticket(tid, priority=new)
        row = await get_ticket(tid)
        try:
            await q.edit_message_text(fmt_ticket(row),
                reply_markup=kb_repair(tid, admin, is_assignee, tech=is_tech(uid)))
        except: pass
        return

    if action == "cancel_with_reason" and admin:
        PENDING_REASON[uid] = ("cancel_repair", tid)
        try: await q.edit_message_text(f"üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –¥–ª—è –∑–∞—è–≤–∫–∏ ‚Ññ{tid} –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        except: pass
        return

# ---------- main ----------
async def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Secrets.")
    await init_db()

    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start",   cmd_start))
    app.add_handler(CommandHandler("new",     cmd_new))
    app.add_handler(CommandHandler("buy",     cmd_buy))
    app.add_handler(CommandHandler("my",      cmd_my))
    app.add_handler(CommandHandler("repairs", cmd_repairs))
    app.add_handler(CommandHandler("purchases", cmd_purchases))
    app.add_handler(CommandHandler("find",    cmd_find))
    app.add_handler(CommandHandler("export",  cmd_export))
    app.add_handler(CommandHandler("journal", cmd_journal))
    app.add_handler(CallbackQueryHandler(on_btn))
    app.add_handler(MessageHandler(filters.PHOTO, any_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, any_text))

    print("ITS bot running...\nBot is polling for updates...")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
