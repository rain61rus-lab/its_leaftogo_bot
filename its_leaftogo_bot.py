# its_helpdesk_bot.py
# Telegram bot for engineering/maintenance helpdesk
# python-telegram-bot==20.7, aiosqlite
#
# –û–±–Ω–æ–≤–ª–µ–Ω–∏—è (24.10.2025):
# 1. –ü–µ—Ä–µ–¥ –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ–ª–æ–º–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–º–µ—â–µ–Ω–∏–µ –∏ —Å—Ä–æ—á–Ω–æ—Å—Ç—å:
#    - üü¢ –ü–ª–∞–Ω–æ–≤–æ–µ (low)
#    - üü° –°—Ä–æ—á–Ω–æ, –ø—Ä–æ—Å—Ç–æ–π (normal)
#    - üî¥ –ê–≤–∞—Ä–∏—è, –ª–∏–Ω–∏—è —Å—Ç–æ–∏—Ç (high)
#    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ ticket.priority.
#
# 2. –ú–µ—Ö–∞–Ω–∏–∫ –ø—Ä–∏ "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" —Ç–µ–ø–µ—Ä—å –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å—Ä–∞–∑—É. –ë–æ—Ç –ø—Ä–æ—Å–∏—Ç:
#    "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–≥–æ—Ç–æ–≤–æ'".
#    –ü–æ—Å–ª–µ —Ñ–æ—Ç–æ/—Ç–µ–∫—Å—Ç–∞ –∑–∞—è–≤–∫–∞ —É—Ö–æ–¥–∏—Ç –≤ DONE, —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è done_at,
#    –∏ —Ñ–æ—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ done_photo_file_id.
#
# 3. –ê–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
#    - –∫–æ–≥–¥–∞ –º–µ—Ö–∞–Ω–∏–∫ –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É;
#    - –∫–æ–≥–¥–∞ –º–µ—Ö–∞–Ω–∏–∫ –∑–∞–∫—Ä—ã–ª.
#
# 4. –£ –º–µ—Ö–∞–Ω–∏–∫–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ä–µ–º–æ–Ω—Ç–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –∫–Ω–æ–ø–∫–∞
#    "üõí –¢—Ä–µ–±—É–µ—Ç –∑–∞–∫—É–ø–∫—É".
#    –ü–æ—Å–ª–µ –Ω–µ—ë –±–æ—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç "–ß—Ç–æ –∫—É–ø–∏—Ç—å?" –∏ —Å–∞–º —Å–æ–∑–¥–∞—ë—Ç –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É,
#    –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø–∏—à–µ—Ç "–ó–∞–ø—á–∞—Å—Ç—å –¥–ª—è –∑–∞—è–≤–∫–∏ #ID (–º–µ—Å—Ç–æ): ...".
#
# –ü–ª—é—Å –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∏—á–∏:
# - –º–µ—Ö–∞–Ω–∏–∫–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–º–æ–Ω—Ç/–ø–æ–∫—É–ø–∫—É –∏ –≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏;
# - –ø–æ–º–µ—â–µ–Ω–∏–µ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∏–∑ –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫ (—Ü–µ—Ö –≤–∞—Ä–∫–∏ 1 –∏ —Ç.–¥.);
# - –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ñ–æ—Ç–æ –ø—Ä–∏—Ö–æ–¥—è—Ç –º–µ—Ö–∞–Ω–∏–∫–∞–º/–∞–¥–º–∏–Ω–∞–º –∫–∞–∫ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é;
# - –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∫—É, –ø–æ–≤—ã—à–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç;
# - –∂—É—Ä–Ω–∞–ª/—ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.

import os
import io
import csv
import logging
from datetime import datetime, timedelta, timezone

import aiosqlite
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton,
    InputFile,
)
from telegram.ext import (
    ApplicationBuilder,
    Application,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# ------------------ –ù–ê–°–¢–†–û–ô–ö–ò ------------------

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set. –£–∫–∞–∂–∏ BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –ó–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ–π user_id –∫–∞–∫ –∞–¥–º–∏–Ω–∞.
# –£–∑–Ω–∞—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ /whoami.
HARD_ADMIN_IDS = {826495316}

ENV_ADMIN_IDS = {
    int(x)
    for x in os.getenv("ADMIN_IDS", "").replace(",", " ").split()
    if x.isdigit()
}
# ENV_TECH_IDS –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω (–º–µ—Ö–∞–Ω–∏–∫—É –º–æ–∂–Ω–æ –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å —á–µ—Ä–µ–∑ /add_tech)
ENV_TECH_IDS: set[int] = set()

# ------------------ –õ–û–ì–ò ------------------

os.makedirs("logs", exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    handlers=[
        logging.FileHandler("logs/bot.log", encoding="utf-8"),
        logging.StreamHandler(),
    ],
)
log = logging.getLogger("its-helpdesk-bot")

# ------------------ –ö–û–ù–°–¢–ê–ù–¢–´ ------------------

DB_PATH = "its_helpdesk.sqlite3"

# –ú–°–ö (UTC+3)
TZ = timezone(timedelta(hours=3), name="MSK")
DATE_FMT = "%Y-%m-%d %H:%M"

KIND_REPAIR = "repair"
KIND_PURCHASE = "purchase"

STATUS_NEW = "new"
STATUS_IN_WORK = "in_work"
STATUS_DONE = "done"
STATUS_APPROVED = "approved"
STATUS_REJECTED = "rejected"
STATUS_CANCELED = "canceled"

PRIORITIES = ["low", "normal", "high"]  # low=–ø–ª–∞–Ω–æ–≤–æ–µ, normal=—Å—Ä–æ—á–Ω–æ, high=–∞–≤–∞—Ä–∏—è

# user_data keys / —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
# UD_MODE:
#   None
#   "choose_location_repair"   - –≤—ã–±—Ä–∞—Ç—å –ø–æ–º–µ—â–µ–Ω–∏–µ
#   "input_location_repair"    - –≤–≤–µ—Å—Ç–∏ –ø–æ–º–µ—â–µ–Ω–∏–µ —Ä—É–∫–∞–º–∏
#   "choose_priority_repair"   - –≤—ã–±—Ä–∞—Ç—å —Å—Ä–æ—á–Ω–æ—Å—Ç—å
#   "create_repair"            - –Ω–∞–ø–∏—Å–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞ / –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
#   "create_purchase"          - –Ω–∞–ø–∏—Å–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É –≤—Ä—É—á–Ω—É—é
#   "await_reason"             - –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞/–æ—Ç–º–µ–Ω—ã
#   "await_done_photo"         - –º–µ—Ö–∞–Ω–∏–∫ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫—É: –∂–¥—ë–º —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç
#   "await_buy_desc"           - –º–µ—Ö–∞–Ω–∏–∫ –∑–∞–ø—Ä–æ—Å–∏–ª –∑–∞–∫—É–ø–∫—É –ø–æ —Ä–µ–º–æ–Ω—Ç—É
UD_MODE = "mode"

UD_REASON_CONTEXT = "reason_ctx"     # {action, ticket_id}
UD_REPAIR_LOC = "repair_location"    # –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ
UD_REPAIR_PRIORITY = "repair_priority"  # low/normal/high
UD_DONE_CTX = "done_ctx"             # ticket_id –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
UD_BUY_CONTEXT = "buy_ctx"           # {ticket_id} –¥–ª—è –∑–∞–∫—É–ø–∫–∏

# –±—ã—Å—Ç—Ä—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–º–µ—â–µ–Ω–∏–π
LOCATIONS = [
    "—Ü–µ—Ö –≤–∞—Ä–∫–∏ 1",
    "—Ü–µ—Ö –≤–∞—Ä–∫–∏ 2",
    "—Ä–∞—Å—Ç–∞—Ä–æ—á–Ω–∞—è",
    "—Ü–µ—Ö —Ñ–∞—Å–æ–≤–∫–∏ –ø–æ—Ä–æ—à–∫–∞",
    "—Ü–µ—Ö —Ñ–∞—Å–æ–≤–∫–∏ –∫–∞–ø—Å—É–ª",
    "—Ü–µ—Ö —Ñ–∞—Å–æ–≤–∫–∏ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–æ–≤",
    "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–¥–µ–ª",
    "—Å–∫–ª–∞–¥",
]
LOC_OTHER = "–î—Ä—É–≥–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ‚Ä¶"
LOC_CANCEL = "‚Ü© –û—Ç–º–µ–Ω–∞"

# ------------------ –£–¢–ò–õ–ò–¢–´ ------------------

def now_local():
    return datetime.now(tz=TZ)

def fmt_dt(dt_str: str | None) -> str:
    if not dt_str:
        return "‚Äî"
    try:
        dt = datetime.fromisoformat(dt_str)
        if dt.tzinfo is None:
            dt = dt.replace(tzinfo=TZ)
        return dt.astimezone(TZ).strftime(DATE_FMT)
    except Exception:
        return dt_str

def human_duration(start_iso: str | None, end_iso: str | None) -> str:
    if not start_iso or not end_iso:
        return "‚Äî"
    try:
        s = datetime.fromisoformat(start_iso)
        e = datetime.fromisoformat(end_iso)
        if s.tzinfo is None:
            s = s.replace(tzinfo=TZ)
        if e.tzinfo is None:
            e = e.replace(tzinfo=TZ)
        if e < s:
            s, e = e, s
        delta = e - s
        days = delta.days
        hours = delta.seconds // 3600
        minutes = (delta.seconds % 3600) // 60
        parts = []
        if days:
            parts.append(f"{days}–¥")
        if hours:
            parts.append(f"{hours}—á")
        if minutes or not parts:
            parts.append(f"{minutes}–º")
        return " ".join(parts)
    except Exception:
        return "‚Äî"

def chunk_text(s: str, limit: int = 4000):
    for i in range(0, len(s), limit):
        yield s[i:i+limit]

def ensure_int(s: str) -> int | None:
    try:
        return int(s)
    except Exception:
        return None

# ------------------ –ë–ê–ó–ê –î–ê–ù–ù–´–• ------------------

async def init_db(app: Application):
    db = await aiosqlite.connect(DB_PATH)
    await db.execute("PRAGMA journal_mode=WAL;")
    await db.execute("PRAGMA synchronous=NORMAL;")

    # –í —Ç–∞–±–ª–∏—Ü—É tickets –¥–æ–±–∞–≤–ª–µ–Ω—ã:
    # - location TEXT
    # - reason TEXT
    # - done_photo_file_id TEXT (—Ñ–æ—Ç–æ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞)
    await db.execute(
        """
        CREATE TABLE IF NOT EXISTS tickets (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            kind TEXT CHECK(kind IN ('repair','purchase')) NOT NULL,
            status TEXT NOT NULL,
            priority TEXT CHECK(priority IN ('low','normal','high')) NOT NULL DEFAULT 'normal',
            chat_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            username TEXT,
            description TEXT NOT NULL,
            photo_file_id TEXT,
            done_photo_file_id TEXT,
            assignee_id INTEGER,
            assignee_name TEXT,
            location TEXT,
            reason TEXT,
            created_at TEXT NOT NULL,
            updated_at TEXT NOT NULL,
            started_at TEXT,
            done_at TEXT
        )
        """
    )
    await db.execute("CREATE INDEX IF NOT EXISTS idx_tickets_kind ON tickets(kind);")
    await db.execute("CREATE INDEX IF NOT EXISTS idx_tickets_status ON tickets(status);")
    await db.execute("CREATE INDEX IF NOT EXISTS idx_tickets_user ON tickets(user_id);")

    await db.execute(
        """
        CREATE TABLE IF NOT EXISTS users (
            uid INTEGER PRIMARY KEY,
            role TEXT CHECK(role IN ('admin','tech')),
            last_username TEXT,
            last_seen TEXT
        )
        """
    )

    # –º–∏–≥—Ä–∞—Ü–∏–∏ (–¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ –±—ã–ª–æ)
    try:
        async with db.execute("PRAGMA table_info(tickets);") as cur:
            cols = [row[1] async for row in cur]
        if "reason" not in cols:
            await db.execute("ALTER TABLE tickets ADD COLUMN reason TEXT;")
        if "location" not in cols:
            await db.execute("ALTER TABLE tickets ADD COLUMN location TEXT;")
        if "done_photo_file_id" not in cols:
            await db.execute("ALTER TABLE tickets ADD COLUMN done_photo_file_id TEXT;")
    except Exception as e:
        log.warning(f"DB migration (tickets) check failed: {e}")

    try:
        async with db.execute("PRAGMA table_info(users);") as cur:
            cols = [row[1] async for row in cur]
        if "last_username" not in cols:
            await db.execute("ALTER TABLE users ADD COLUMN last_username TEXT;")
        if "last_seen" not in cols:
            await db.execute("ALTER TABLE users ADD COLUMN last_seen TEXT;")
    except Exception as e:
        log.warning(f"DB migration (users) check failed: {e}")

    await db.commit()
    app.bot_data["db"] = db

async def db_close(app: Application):
    db: aiosqlite.Connection | None = app.bot_data.get("db")
    if db:
        await db.close()

async def db_add_user_role(db, uid: int, role: str):
    await db.execute(
        "INSERT INTO users(uid, role) VALUES(?, ?) "
        "ON CONFLICT(uid) DO UPDATE SET role=excluded.role",
        (uid, role),
    )
    await db.commit()

async def db_seen_user(db, uid: int, username: str | None):
    uname = (username or "").strip() or None
    now = now_local().isoformat()
    await db.execute(
        "INSERT INTO users(uid, role, last_username, last_seen) "
        "VALUES(?, NULL, ?, ?) "
        "ON CONFLICT(uid) DO UPDATE SET "
        "last_username=excluded.last_username, "
        "last_seen=excluded.last_seen",
        (uid, uname, now),
    )
    await db.commit()

async def db_lookup_uid_by_username(db, username: str) -> int | None:
    uname = username.lstrip('@').strip().lower()
    async with db.execute(
        "SELECT uid FROM users WHERE lower(last_username)=? LIMIT 1", (uname,)
    ) as cur:
        row = await cur.fetchone()
    return row[0] if row else None

async def db_list_roles(db):
    admins = set(HARD_ADMIN_IDS) | set(ENV_ADMIN_IDS)
    techs = set(ENV_TECH_IDS)
    async with db.execute("SELECT uid, role FROM users") as cur:
        async for uid, role in cur:
            if role == "admin":
                admins.add(uid)
            elif role == "tech":
                techs.add(uid)
    return sorted(admins), sorted(techs)

async def is_admin(db, uid: int) -> bool:
    if uid in HARD_ADMIN_IDS or uid in ENV_ADMIN_IDS:
        return True
    async with db.execute(
        "SELECT 1 FROM users WHERE uid=? AND role='admin' LIMIT 1", (uid,)
    ) as cur:
        row = await cur.fetchone()
    return bool(row)

async def is_tech(db, uid: int) -> bool:
    if uid in ENV_TECH_IDS or await is_admin(db, uid):
        return True
    async with db.execute(
        "SELECT 1 FROM users WHERE uid=? AND role='tech' LIMIT 1", (uid,)
    ) as cur:
        row = await cur.fetchone()
    return bool(row)

# ------------------ –ú–ï–ù–Æ ------------------

async def main_menu(db, uid: int):
    if await is_admin(db, uid):
        rows = [
            [KeyboardButton("üõ† –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç"), KeyboardButton("üßæ –ú–æ–∏ –∑–∞—è–≤–∫–∏")],
            [KeyboardButton("üõí –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É"), KeyboardButton("üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏")],
            [KeyboardButton("üõ† –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç")],
            [KeyboardButton("üõí –ü–æ–∫—É–ø–∫–∏"), KeyboardButton("üìì –ñ—É—Ä–Ω–∞–ª")],
        ]
        return ReplyKeyboardMarkup(rows, resize_keyboard=True)

    if await is_tech(db, uid):
        rows = [
            [KeyboardButton("üõ† –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç"), KeyboardButton("üßæ –ú–æ–∏ –∑–∞—è–≤–∫–∏")],
            [KeyboardButton("üõí –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É"), KeyboardButton("üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏")],
            [KeyboardButton("üõ† –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç")],
        ]
        return ReplyKeyboardMarkup(rows, resize_keyboard=True)

    rows = [
        [KeyboardButton("üõ† –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç"), KeyboardButton("üßæ –ú–æ–∏ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton("üõí –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É"), KeyboardButton("üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏")],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def ticket_inline_kb(ticket: dict, is_admin_flag: bool, me_id: int):
    kb = []
    if ticket["kind"] == "repair":
        if is_admin_flag:
            kb.append([
                InlineKeyboardButton("‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Üë", callback_data=f"prio:{ticket['id']}")
            ])
            kb.append([
                InlineKeyboardButton("üë§ –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±–µ", callback_data=f"assign_self:{ticket['id']}"),
                InlineKeyboardButton("üë• –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ—Ö–∞–Ω–∏–∫—É", callback_data=f"assign_menu:{ticket['id']}"),
            ])
        kb.append([InlineKeyboardButton("‚è± –í —Ä–∞–±–æ—Ç—É", callback_data=f"to_work:{ticket['id']}")])
        if (ticket.get("assignee_id") == me_id):
            kb.append([InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done:{ticket['id']}")])
            kb.append([InlineKeyboardButton("üõë –û—Ç–∫–∞–∑ (—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º)", callback_data=f"decline:{ticket['id']}")])
            kb.append([InlineKeyboardButton("üõí –¢—Ä–µ–±—É–µ—Ç –∑–∞–∫—É–ø–∫—É", callback_data=f"need_buy:{ticket['id']}")])
    elif ticket["kind"] == "purchase":
        if is_admin_flag:
            kb.append([
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve:{ticket['id']}"),
                InlineKeyboardButton("üõë –û—Ç–∫–ª–æ–Ω–∏—Ç—å (—Å –ø—Ä–∏—á–∏–Ω–æ–π)", callback_data=f"reject:{ticket['id']}"),
            ])
    return InlineKeyboardMarkup(kb) if kb else None

# ------------------ –¢–ò–ö–ï–¢–´ ------------------

async def create_ticket(
    db,
    *,
    kind: str,
    chat_id: int,
    user_id: int,
    username: str | None,
    description: str,
    photo_file_id: str | None,
    location: str | None = None,
    priority: str | None = None,
    done_photo_file_id: str | None = None,
):
    now = now_local().isoformat()
    pr = priority or "normal"
    await db.execute(
        """
        INSERT INTO tickets(
            kind, status, priority,
            chat_id, user_id, username,
            description,
            photo_file_id,
            done_photo_file_id,
            assignee_id, assignee_name,
            location,
            reason,
            created_at, updated_at,
            started_at, done_at
        )
        VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
        """,
        (
            kind,
            STATUS_NEW,
            pr,
            chat_id,
            user_id,
            username,
            description.strip(),
            photo_file_id,
            done_photo_file_id,
            None,
            None,
            location,
            None,
            now,
            now,
            None,
            None,
        ),
    )
    await db.commit()

async def find_tickets(
    db,
    *,
    kind: str | None = None,
    status: str | None = None,
    user_id: int | None = None,
    assignee_id: int | None = None,
    unassigned_only: bool = False,
    q: str | None = None,
    limit: int = 20,
    offset: int = 0,
):
    sql = (
        "SELECT id, kind, status, priority, chat_id, user_id, username, description, "
        "photo_file_id, done_photo_file_id, assignee_id, assignee_name, location, reason, "
        "created_at, updated_at, started_at, done_at "
        "FROM tickets"
    )
    where, params = [], []
    if kind:
        where.append("kind=?"); params.append(kind)
    if status:
        where.append("status=?"); params.append(status)
    if user_id is not None:
        where.append("user_id=?"); params.append(user_id)
    if assignee_id is not None:
        where.append("assignee_id=?"); params.append(assignee_id)
    if unassigned_only:
        where.append("assignee_id IS NULL")
    if q:
        if q.startswith("#") and q[1:].isdigit():
            where.append("id=?"); params.append(int(q[1:]))
        else:
            where.append("(description LIKE ? OR location LIKE ?)")
            params.extend([f"%{q}%", f"%{q}%"])
    if where:
        sql += " WHERE " + " AND ".join(where)
    sql += " ORDER BY id DESC LIMIT ? OFFSET ?"
    params.extend([limit, offset])
    rows = []
    async with db.execute(sql, params) as cur:
        async for row in cur:
            rows.append(
                {
                    "id": row[0],
                    "kind": row[1],
                    "status": row[2],
                    "priority": row[3],
                    "chat_id": row[4],
                    "user_id": row[5],
                    "username": row[6],
                    "description": row[7],
                    "photo_file_id": row[8],
                    "done_photo_file_id": row[9],
                    "assignee_id": row[10],
                    "assignee_name": row[11],
                    "location": row[12],
                    "reason": row[13],
                    "created_at": row[14],
                    "updated_at": row[15],
                    "started_at": row[16],
                    "done_at": row[17],
                }
            )
    return rows

async def get_ticket(db, ticket_id: int) -> dict | None:
    async with db.execute(
        """
        SELECT id, kind, status, priority,
               chat_id, user_id, username,
               description,
               photo_file_id,
               done_photo_file_id,
               assignee_id, assignee_name,
               location, reason,
               created_at, updated_at,
               started_at, done_at
        FROM tickets
        WHERE id=?
        """,
        (ticket_id,),
    ) as cur:
        row = await cur.fetchone()
    if not row:
        return None
    return {
        "id": row[0],
        "kind": row[1],
        "status": row[2],
        "priority": row[3],
        "chat_id": row[4],
        "user_id": row[5],
        "username": row[6],
        "description": row[7],
        "photo_file_id": row[8],
        "done_photo_file_id": row[9],
        "assignee_id": row[10],
        "assignee_name": row[11],
        "location": row[12],
        "reason": row[13],
        "created_at": row[14],
        "updated_at": row[15],
        "started_at": row[16],
        "done_at": row[17],
    }

async def update_ticket(db, ticket_id: int, **fields):
    if not fields:
        return
    fields["updated_at"] = now_local().isoformat()
    cols = ", ".join([f"{k}=?" for k in fields.keys()])
    params = list(fields.values()) + [ticket_id]
    await db.execute(f"UPDATE tickets SET {cols} WHERE id=?", params)
    await db.commit()

# ------------------ –†–ï–ù–î–ï–† ------------------

def render_ticket_line(t: dict) -> str:
    if t["kind"] == "repair":
        icon = "üõ†"
        stat = {
            "new": "üÜï –ù–æ–≤–∞—è",
            "in_work": "‚è± –í —Ä–∞–±–æ—Ç–µ",
            "done": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞",
            "rejected": "üõë –û—Ç–∫–∞–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è",
            "canceled": "üóë –û—Ç–º–µ–Ω–µ–Ω–∞",
        }.get(t["status"], t["status"])
        prio_human = {
            "low": "üü¢ –ø–ª–∞–Ω–æ–≤–æ–µ",
            "normal": "üü° —Å—Ä–æ—á–Ω–æ",
            "high": "üî¥ –∞–≤–∞—Ä–∏—è",
        }.get(t["priority"], t["priority"])
        assgn = f" ‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {t['assignee_name'] or t['assignee_id'] or '‚Äî'}"
        loc = f"\n–ü–æ–º–µ—â–µ–Ω–∏–µ: {t.get('location') or '‚Äî'}"
        times = f"\n–°–æ–∑–¥–∞–Ω–∞: {fmt_dt(t['created_at'])}"
        if t["started_at"]:
            times += f" ‚Ä¢ –í–∑—è—Ç–∞: {fmt_dt(t['started_at'])}"
        if t["done_at"]:
            times += (
                f" ‚Ä¢ –ì–æ—Ç–æ–≤–æ: {fmt_dt(t['done_at'])}"
                f" ‚Ä¢ –î–ª–∏—Ç.: {human_duration(t['started_at'], t['done_at'])}"
            )
        reason = ""
        if t["status"] in ("rejected", "canceled") and t.get("reason"):
            reason = f"\n–ü—Ä–∏—á–∏–Ω–∞: {t['reason']}"
        return (
            f"{icon} #{t['id']} ‚Ä¢ {stat} ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {prio_human}{assgn}\n"
            f"{t['description']}{loc}{times}{reason}"
        )
    else:
        icon = "üõí"
        stat = {
            "new": "üÜï –ù–æ–≤–∞—è",
            "approved": "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞",
            "rejected": "üõë –û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            "canceled": "üóë –û—Ç–º–µ–Ω–µ–Ω–∞",
        }.get(t["status"], t["status"])
        times = f"\n–°–æ–∑–¥–∞–Ω–∞: {fmt_dt(t['created_at'])}"
        reason = (
            f"\n–ü—Ä–∏—á–∏–Ω–∞: {t['reason']}"
            if t["status"] in ("rejected", "canceled") and t.get("reason")
            else ""
        )
        return f"{icon} #{t['id']} ‚Ä¢ {stat}\n{t['description']}{times}{reason}"

# ------------------ –û–¢–ü–†–ê–í–ö–ê –ö–ê–†–¢–û–ß–ï–ö ------------------

async def send_ticket_card(context: ContextTypes.DEFAULT_TYPE, chat_id: int, t: dict, kb: InlineKeyboardMarkup | None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏:
    - –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–º–æ–Ω—Ç –∏ –µ—Å—Ç—å photo_file_id -> –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ –∫–∞—Ä—Ç–æ—á–∫—É;
    - –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç.
    """
    try:
        if t.get("photo_file_id") and t.get("kind") == "repair":
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=t["photo_file_id"],
                caption=render_ticket_line(t),
                reply_markup=kb,
            )
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text=render_ticket_line(t),
                reply_markup=kb,
            )
    except Exception as e:
        log.debug(f"send_ticket_card failed: {e}")

async def edit_message_text_or_caption(query, new_text: str):
    """
    –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ñ–æ—Ç–æ ‚Äî –ø—Ä–∞–≤–∏–º –ø–æ–¥–ø–∏—Å—å.
    –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–∞–≤–∏–º —Ç–µ–∫—Å—Ç.
    """
    try:
        if getattr(query.message, "photo", None):
            await query.edit_message_caption(caption=new_text)
        else:
            await query.edit_message_text(new_text)
    except Exception as e:
        log.debug(f"edit_message_text_or_caption failed: {e}")

# ------------------ –•–ï–ù–î–õ–ï–†–´ –ö–û–ú–ê–ù–î ------------------

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = context.application.bot_data["db"]
    uid = update.effective_user.id
    await db_seen_user(db, uid, update.effective_user.username)
    kb = await main_menu(db, uid)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Å–ª—É–∂–±—ã.", reply_markup=kb
    )
    context.user_data[UD_MODE] = None
    context.user_data[UD_REPAIR_LOC] = None
    context.user_data[UD_REPAIR_PRIORITY] = None
    context.user_data[UD_DONE_CTX] = None
    context.user_data[UD_BUY_CONTEXT] = None

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ß—Ç–æ –æ–Ω —É–º–µ–µ—Ç:\n\n"
        "‚Ä¢ üõ† –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç ‚Äî –≤—ã–±—Ä–∞—Ç—å –ø–æ–º–µ—â–µ–Ω–∏–µ, —Å—Ä–æ—á–Ω–æ—Å—Ç—å, –æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É (–º–æ–∂–Ω–æ —Ñ–æ—Ç–æ).\n"
        "‚Ä¢ üõí –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∑–∞–∫—É–ø–∫—É.\n"
        "‚Ä¢ üßæ –ú–æ–∏ –∑–∞—è–≤–∫–∏ ‚Äî –≤—Å–µ –º–æ–∏ –∑–∞—è–≤–∫–∏ (—Ä–µ–º–æ–Ω—Ç –∏ –ø–æ–∫—É–ø–∫–∞).\n"
        "‚Ä¢ üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ –º–æ–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É.\n"
        "‚Ä¢ üõ† –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç ‚Äî —Å–ø–∏—Å–æ–∫ –¥–ª—è –º–µ—Ö–∞–Ω–∏–∫–∞ / –∞–¥–º–∏–Ω–∞.\n"
        "‚Ä¢ üõí –ü–æ–∫—É–ø–∫–∏ ‚Äî –Ω–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ (–∞–¥–º–∏–Ω).\n"
        "‚Ä¢ üìì –ñ—É—Ä–Ω–∞–ª ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ / –≤ —Ä–∞–±–æ—Ç–µ (–∞–¥–º–∏–Ω).\n\n"
        "–ú–µ—Ö–∞–Ω–∏–∫ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ä–µ–º–æ–Ω—Ç–∞ –º–æ–∂–µ—Ç:\n"
        "‚Ä¢ –≤–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É,\n"
        "‚Ä¢ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (—Å —Ñ–æ—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞),\n"
        "‚Ä¢ –æ—Ç–∫–∞–∑–∞—Ç—å —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º,\n"
        "‚Ä¢ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∑–∞–∫—É–ø–∫—É –∑–∞–ø—á–∞—Å—Ç–∏ üõí.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/repairs [status] [page] ‚Äî —Ä–µ–º–æ–Ω—Ç–Ω—ã–µ –∑–∞—è–≤–∫–∏ (new|in_work|done|all)\n"
        "/me [status] [page] ‚Äî –º–æ–∏ –∑–∞—è–≤–∫–∏ –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n"
        "/mypurchases [page] ‚Äî –º–æ–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É\n"
        "/find <—Ç–µ–∫—Å—Ç|#id> ‚Äî –ø–æ–∏—Å–∫ (–∞–¥–º–∏–Ω)\n"
        "/export [week|month] ‚Äî CSV (–∞–¥–º–∏–Ω)\n"
        "/journal [days] ‚Äî –∂—É—Ä–Ω–∞–ª (–∞–¥–º–∏–Ω)\n"
        "/add_tech <user_id|@nick> ‚Äî –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å –º–µ—Ö–∞–Ω–∏–∫–∞ (–∞–¥–º–∏–Ω)\n"
        "/roles ‚Äî —Ä–æ–ª–∏\n"
        "/whoami ‚Äî —Å–≤–æ–π user_id\n"
        "/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
    )
    await update.message.reply_text(text)

async def cmd_whoami(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = context.application.bot_data["db"]
    uid = update.effective_user.id
    uname = update.effective_user.username or "‚Äî"
    await db_seen_user(db, uid, update.effective_user.username)
    await update.message.reply_text(f"–¢–≤–æ–π user_id: {uid}\nusername: @{uname}")

# ------------------ –ö–õ–ê–í–ò–ê–¢–£–†–´ –í–í–û–î–ê ------------------

def locations_keyboard():
    rows = []
    row = []
    for i, name in enumerate(LOCATIONS, start=1):
        row.append(KeyboardButton(name))
        if i % 2 == 0:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([KeyboardButton(LOC_OTHER)])
    rows.append([KeyboardButton(LOC_CANCEL)])
    return ReplyKeyboardMarkup(rows, resize_keyboard=True, one_time_keyboard=True)

def priority_keyboard():
    rows = [
        [KeyboardButton("üü¢ –ü–ª–∞–Ω–æ–≤–æ–µ (–º–æ–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å)")],
        [KeyboardButton("üü° –°—Ä–æ—á–Ω–æ, –ø—Ä–æ—Å—Ç–æ–π")],
        [KeyboardButton("üî¥ –ê–≤–∞—Ä–∏—è, –ª–∏–Ω–∏—è —Å—Ç–æ–∏—Ç")],
        [KeyboardButton(LOC_CANCEL)],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True, one_time_keyboard=True)

# ------------------ –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –¢–ï–ö–°–¢–ê ------------------

async def on_text_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = context.application.bot_data["db"]
    uid = update.effective_user.id
    await db_seen_user(db, uid, update.effective_user.username)

    text_in = (update.message.text or "").strip()
    mode = context.user_data.get(UD_MODE)

    # –®–ê–ì 1. –°–æ–∑–¥–∞—Ç—å —Ä–µ–º–æ–Ω—Ç -> –≤—ã–±–æ—Ä –ø–æ–º–µ—â–µ–Ω–∏—è
    if text_in == "üõ† –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç" and mode is None:
        context.user_data[UD_MODE] = "choose_location_repair"
        context.user_data[UD_REPAIR_LOC] = None
        context.user_data[UD_REPAIR_PRIORITY] = None
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –ø–æ–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞:",
            reply_markup=locations_keyboard(),
        )
        return

    # –≤—ã–±–æ—Ä –ø–æ–º–µ—â–µ–Ω–∏—è
    if mode == "choose_location_repair":
        if text_in == LOC_CANCEL:
            context.user_data[UD_MODE] = None
            context.user_data[UD_REPAIR_LOC] = None
            context.user_data[UD_REPAIR_PRIORITY] = None
            await update.message.reply_text(
                "–û—Ç–º–µ–Ω–∞.",
                reply_markup=await main_menu(db, uid),
            )
            return
        if text_in == LOC_OTHER:
            context.user_data[UD_MODE] = "input_location_repair"
            await update.message.reply_text(
                "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º:",
                reply_markup=ReplyKeyboardRemove(),
            )
            return
        if text_in in LOCATIONS:
            context.user_data[UD_REPAIR_LOC] = text_in
            context.user_data[UD_MODE] = "choose_priority_repair"
            await update.message.reply_text(
                f"–ü–æ–º–µ—â–µ–Ω–∏–µ: {text_in}\n\n–í—ã–±–µ—Ä–∏ —Å—Ä–æ—á–Ω–æ—Å—Ç—å/–∞–≤–∞—Ä–∏–π–Ω–æ—Å—Ç—å:",
                reply_markup=priority_keyboard(),
            )
            return
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–º–µ—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–î—Ä—É–≥–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ‚Ä¶¬ª.",
        )
        return

    # —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–æ–º–µ—â–µ–Ω–∏—è
    if mode == "input_location_repair":
        custom_loc = text_in
        if not custom_loc or custom_loc in (LOC_CANCEL, LOC_OTHER):
            await update.message.reply_text(
                "–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´‚Ü© –û—Ç–º–µ–Ω–∞¬ª.",
            )
            return
        context.user_data[UD_REPAIR_LOC] = custom_loc
        context.user_data[UD_MODE] = "choose_priority_repair"
        await update.message.reply_text(
            f"–ü–æ–º–µ—â–µ–Ω–∏–µ: {custom_loc}\n\n–í—ã–±–µ—Ä–∏ —Å—Ä–æ—á–Ω–æ—Å—Ç—å/–∞–≤–∞—Ä–∏–π–Ω–æ—Å—Ç—å:",
            reply_markup=priority_keyboard(),
        )
        return

    # –≤—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    if mode == "choose_priority_repair":
        if text_in == LOC_CANCEL:
            context.user_data[UD_MODE] = None
            context.user_data[UD_REPAIR_LOC] = None
            context.user_data[UD_REPAIR_PRIORITY] = None
            await update.message.reply_text(
                "–û—Ç–º–µ–Ω–∞.",
                reply_markup=await main_menu(db, uid),
            )
            return
        pr_map = {
            "üü¢ –ü–ª–∞–Ω–æ–≤–æ–µ (–º–æ–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å)": "low",
            "üü° –°—Ä–æ—á–Ω–æ, –ø—Ä–æ—Å—Ç–æ–π": "normal",
            "üî¥ –ê–≤–∞—Ä–∏—è, –ª–∏–Ω–∏—è —Å—Ç–æ–∏—Ç": "high",
        }
        if text_in in pr_map:
            context.user_data[UD_REPAIR_PRIORITY] = pr_map[text_in]
            context.user_data[UD_MODE] = "create_repair"
            await update.message.reply_text(
                "–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É. –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.",
                reply_markup=ReplyKeyboardRemove(),
            )
            return
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´‚Ü© –û—Ç–º–µ–Ω–∞¬ª.",
        )
        return

    # –®–ê–ì 2. –°–æ–∑–¥–∞—Ç—å –ø–æ–∫—É–ø–∫—É –≤—Ä—É—á–Ω—É—é
    if text_in == "üõí –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É" and mode is None:
        context.user_data[UD_MODE] = "create_purchase"
        await update.message.reply_text(
            "–û–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å (–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ø–æ—á–µ–º—É)."
        )
        return

    # –ú–û–ò –ó–ê–Ø–í–ö–ò
    if text_in == "üßæ –ú–æ–∏ –∑–∞—è–≤–∫–∏" and mode is None:
        rows = await find_tickets(db, user_id=uid, limit=20, offset=0)
        if not rows:
            await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
            return
        for t in rows[:20]:
            await send_ticket_card(context, update.effective_chat.id, t, None)
        return

    # –ú–û–ò –ü–û–ö–£–ü–ö–ò
    if text_in == "üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏" and mode is None:
        rows = await find_tickets(
            db, kind="purchase", user_id=uid, limit=20, offset=0
        )
        if not rows:
            await update.message.reply_text("–¢–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        for t in rows[:20]:
            await send_ticket_card(context, update.effective_chat.id, t, None)
        return

    # –°–ü–ò–°–û–ö –ó–ê–Ø–í–û–ö –ù–ê –†–ï–ú–û–ù–¢
    if text_in == "üõ† –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç" and mode is None:
        admin = await is_admin(db, uid)
        if admin:
            rows = await find_tickets(
                db, kind="repair", status="new", limit=20, offset=0
            )
            if not rows:
                await update.message.reply_text("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–º–æ–Ω—Ç.")
                return
            for t in rows:
                kb = ticket_inline_kb(t, is_admin_flag=True, me_id=uid)
                await send_ticket_card(
                    context, update.effective_chat.id, t, kb
                )
        else:
            new_unassigned = await find_tickets(
                db,
                kind="repair",
                status="new",
                unassigned_only=True,
                limit=20,
                offset=0,
            )
            new_assigned_to_me = await find_tickets(
                db,
                kind="repair",
                status="new",
                assignee_id=uid,
                limit=20,
                offset=0,
            )
            in_rows = await find_tickets(
                db,
                kind="repair",
                status="in_work",
                assignee_id=uid,
                limit=20,
                offset=0,
            )
            rows = new_assigned_to_me + in_rows + new_unassigned
            if not rows:
                await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
                return
            for t in rows:
                kb = ticket_inline_kb(t, is_admin_flag=False, me_id=uid)
                await send_ticket_card(
                    context, update.effective_chat.id, t, kb
                )
        return

    # –ê–î–ú–ò–ù: –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É
    if text_in == "üõí –ü–æ–∫—É–ø–∫–∏" and mode is None:
        if not await is_admin(db, uid):
            await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
            return
        rows = await find_tickets(
            db, kind="purchase", status="new", limit=20, offset=0
        )
        if not rows:
            await update.message.reply_text("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É.")
            return
        for t in rows:
            kb = ticket_inline_kb(t, is_admin_flag=True, me_id=uid)
            await send_ticket_card(
                context, update.effective_chat.id, t, kb
            )
        return

    # –ê–î–ú–ò–ù: –∂—É—Ä–Ω–∞–ª
    if text_in == "üìì –ñ—É—Ä–Ω–∞–ª" and mode is None:
        if not await is_admin(db, uid):
            await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
            return
        await cmd_journal(update, context)
        return

    # –ó–ê–í–ï–†–®–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò (–º–µ—Ö–∞–Ω–∏–∫ —É–∂–µ –Ω–∞–∂–∞–ª ‚úÖ, –∂–¥—ë–º —Ñ–æ—Ç–æ –∏–ª–∏ "–≥–æ—Ç–æ–≤–æ")
    if mode == "await_done_photo":
        tid = context.user_data.get(UD_DONE_CTX)
        if not tid:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞—è–≤–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
            )
            context.user_data[UD_MODE] = None
            context.user_data[UD_DONE_CTX] = None
            return
        t = await get_ticket(db, tid)
        if not t:
            await update.message.reply_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            # —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
            if t.get("assignee_id") != uid:
                await update.message.reply_text(
                    "–ó–∞–∫—Ä—ã—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å."
                )
            else:
                # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è –±–µ–∑ —Ñ–æ—Ç–æ
                await update_ticket(
                    db,
                    tid,
                    status="done",
                    done_at=now_local().isoformat(),
                )
                # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
                try:
                    await context.bot.send_message(
                        chat_id=t["user_id"],
                        text=(
                            f"–¢–≤–æ—è –∑–∞—è–≤–∫–∞ #{tid} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è."
                        ),
                    )
                except Exception as e:
                    log.debug(f"Notify author done (text) failed: {e}")
                await update.message.reply_text(
                    f"–ó–∞—è–≤–∫–∞ #{tid} –∑–∞–∫—Ä—ã—Ç–∞ ‚úÖ."
                )
        context.user_data[UD_MODE] = None
        context.user_data[UD_DONE_CTX] = None
        return

    # –û–ñ–ò–î–ê–ï–ú –û–ü–ò–°–ê–ù–ò–ï –ó–ê–ö–£–ü–ö–ò –ø–æ—Å–ª–µ "üõí –¢—Ä–µ–±—É–µ—Ç –∑–∞–∫—É–ø–∫—É"
    if mode == "await_buy_desc":
        buy_ctx = context.user_data.get(UD_BUY_CONTEXT) or {}
        tid = buy_ctx.get("ticket_id")
        if not tid:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å —Å —Ä–µ–º–æ–Ω—Ç–Ω–æ–π –∑–∞—è–≤–∫–æ–π."
            )
            context.user_data[UD_MODE] = None
            context.user_data[UD_BUY_CONTEXT] = None
            return
        base_ticket = await get_ticket(db, tid)
        loc = base_ticket.get("location") if base_ticket else "‚Äî"
        uname = update.effective_user.username or ""
        chat_id = update.message.chat_id
        desc = f"–ó–∞–ø—á–∞—Å—Ç—å –¥–ª—è –∑–∞—è–≤–∫–∏ #{tid} ({loc}): {text_in}"

        await create_ticket(
            db,
            kind="purchase",
            chat_id=chat_id,
            user_id=uid,
            username=uname,
            description=desc,
            photo_file_id=None,
            location=None,
        )
        await update.message.reply_text(
            "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É."
        )
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await notify_admins(
            context,
            f"üÜï –ü–æ–∫—É–ø–∫–∞ –ø–æ —Ä–µ–º–æ–Ω—Ç—É #{tid} –æ—Ç @{uname or uid}:\n{text_in}",
        )
        context.user_data[UD_MODE] = None
        context.user_data[UD_BUY_CONTEXT] = None
        return

    # –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ / –æ—Ç–º–µ–Ω—ã / reject
    if mode == "await_reason":
        await handle_reason_input(update, context)
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–º–µ—â–µ–Ω–∏—è+–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (—Ä–µ–º–æ–Ω—Ç) –∏–ª–∏ –æ–±—ã—á–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
    if mode in ("create_repair", "create_purchase"):
        await handle_create_from_text(update, context)
        return

    # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
    await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /help.")

# ------------------ –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–û–ö (–¢–ï–ö–°–¢/–§–û–¢–û) ------------------

async def handle_create_from_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = context.application.bot_data["db"]
    uid = update.effective_user.id
    uname = update.effective_user.username or ""
    chat_id = update.message.chat_id
    mode = context.user_data.get(UD_MODE)

    description = (update.message.text or "").strip()
    if not description:
        await update.message.reply_text("–û–ø–∏—à–∏ –∑–∞—è–≤–∫—É —Ç–µ–∫—Å—Ç–æ–º.")
        return

    # —Ä–µ–º–æ–Ω—Ç
    if mode == "create_repair":
        location = context.user_data.get(UD_REPAIR_LOC)
        priority = context.user_data.get(UD_REPAIR_PRIORITY) or "normal"
        if not location:
            context.user_data[UD_MODE] = "choose_location_repair"
            await update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–æ–º–µ—â–µ–Ω–∏–µ:",
                reply_markup=locations_keyboard(),
            )
            return

        await create_ticket(
            db,
            kind="repair",
            chat_id=chat_id,
            user_id=uid,
            username=uname,
            description=description,
            photo_file_id=None,
            location=location,
            priority=priority,
        )

        await update.message.reply_text(
            f"–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∞.\n"
            f"–ü–æ–º–µ—â–µ–Ω–∏–µ: {location}\n"
            f"–°—Ä–æ—á–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n"
            f"–ê–¥–º–∏–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã."
        )
        # –∞–¥–º–∏–Ω–∞–º –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞—Ä—Ç–æ—á–∫—É
        await notify_admins_ticket(context, uid)

        context.user_data[UD_MODE] = None
        context.user_data[UD_REPAIR_LOC] = None
        context.user_data[UD_REPAIR_PRIORITY] = None
        return

    # –ø–æ–∫—É–ø–∫–∞
    if mode == "create_purchase":
        await create_ticket(
            db,
            kind="purchase",
            chat_id=chat_id,
            user_id=uid,
            username=uname,
            description=description,
            photo_file_id=None,
            location=None,
        )
        await update.message.reply_text(
            "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞."
        )
        await notify_admins(
            context,
            f"üÜï –ü–æ–∫—É–ø–∫–∞ –æ—Ç @{uname or uid}:\n{description}",
        )
        context.user_data[UD_MODE] = None
        return

async def on_photo_with_caption(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç:
    1) –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞ (await_done_photo): –º–µ—Ö–∞–Ω–∏–∫ –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
    2) –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞ —Å —Ñ–æ—Ç–æ (create_repair): –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ –ø–æ–ª–æ–º–∫–∏ —Å –ø–æ–¥–ø–∏—Å—å—é.
    """
    db = context.application.bot_data["db"]
    uid = update.effective_user.id
    await db_seen_user(db, uid, update.effective_user.username)

    mode = context.user_data.get(UD_MODE)

    # 1) –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞—è–≤–∫–∏ —Å —Ñ–æ—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–µ–º–æ–Ω—Ç–∞
    if mode == "await_done_photo":
        tid = context.user_data.get(UD_DONE_CTX)
        if not tid:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞—è–≤–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
            )
            context.user_data[UD_MODE] = None
            context.user_data[UD_DONE_CTX] = None
            return

        t = await get_ticket(db, tid)
        if not t:
            await update.message.reply_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            if t.get("assignee_id") != uid:
                await update.message.reply_text(
                    "–ó–∞–∫—Ä—ã—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å."
                )
            else:
                final_caption = (update.message.caption or "").strip()
                photo = update.message.photo[-1]
                file_id = photo.file_id

                await update_ticket(
                    db,
                    tid,
                    status="done",
                    done_at=now_local().isoformat(),
                    done_photo_file_id=file_id,
                )

                # —É–≤–µ–¥–æ–º–∏—Ç—å –∞–≤—Ç–æ—Ä–∞
                try:
                    await context.bot.send_message(
                        chat_id=t["user_id"],
                        text=(
                            f"–¢–≤–æ—è –∑–∞—è–≤–∫–∞ #{tid} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è."
                        ),
                    )
                except Exception as e:
                    log.debug(
                        f"Notify author done-photo failed: {e}"
                    )

                await update.message.reply_text(
                    f"–ó–∞—è–≤–∫–∞ #{tid} –∑–∞–∫—Ä—ã—Ç–∞ ‚úÖ (—Ñ–æ—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ)."
                )

        context.user_data[UD_MODE] = None
        context.user_data[UD_DONE_CTX] = None
        return

    # 2) —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–µ–º–æ–Ω—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏ —Å —Ñ–æ—Ç–æ –ø–æ–ª–æ–º–∫–∏
    if mode != "create_repair":
        await update.message.reply_text(
            "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å —Ñ–æ—Ç–æ: –Ω–∞–∂–º–∏ ¬´üõ† –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç¬ª, "
            "–≤—ã–±–µ—Ä–∏ –ø–æ–º–µ—â–µ–Ω–∏–µ –∏ —Å—Ä–æ—á–Ω–æ—Å—Ç—å, –∑–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é."
        )
        return

    uname = update.effective_user.username or ""
    chat_id = update.message.chat_id

    caption = (update.message.caption or "").strip()
    if not caption:
        await update.message.reply_text(
            "–î–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ ‚Äî —ç—Ç–æ –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞—è–≤–∫–∏."
        )
        return

    location = context.user_data.get(UD_REPAIR_LOC)
    priority = context.user_data.get(UD_REPAIR_PRIORITY) or "normal"
    if not location:
        context.user_data[UD_MODE] = "choose_location_repair"
        await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–æ–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞:",
            reply_markup=locations_keyboard(),
        )
        return

    photo = update.message.photo[-1]
    file_id = photo.file_id

    await create_ticket(
        db,
        kind="repair",
        chat_id=chat_id,
        user_id=uid,
        username=uname,
        description=caption,
        photo_file_id=file_id,
        location=location,
        priority=priority,
    )

    await update.message.reply_text(
        f"–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç —Å —Ñ–æ—Ç–æ —Å–æ–∑–¥–∞–Ω–∞.\n"
        f"–ü–æ–º–µ—â–µ–Ω–∏–µ: {location}\n"
        f"–°—Ä–æ—á–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n"
        f"–ê–¥–º–∏–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã."
    )

    await notify_admins_ticket(context, uid)

    context.user_data[UD_MODE] = None
    context.user_data[UD_REPAIR_LOC] = None
    context.user_data[UD_REPAIR_PRIORITY] = None

# ------------------ –ê–î–ú–ò–ù –§–£–ù–ö–¶–ò–ò: –ü–û–ò–°–ö / –≠–ö–°–ü–û–†–¢ / –ñ–£–†–ù–ê–õ ------------------

async def cmd_find(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = context.application.bot_data["db"]
    uid = update.effective_user.id
    if not await is_admin(db, uid):
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    q = " ".join(context.args).strip()
    if not q:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /find <—Å—Ç—Ä–æ–∫–∞|#id>")
        return
    rows = await find_tickets(db, q=q, limit=50, offset=0)
    if not rows:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    for t in rows:
        kb = ticket_inline_kb(t, is_admin_flag=True, me_id=uid)
        await send_ticket_card(context, update.effective_chat.id, t, kb)

async def export_rows(db, start_iso: str):
    async with db.execute(
        """
        SELECT
            id, kind, status, priority,
            user_id, username,
            assignee_id, assignee_name,
            location,
            created_at, started_at, done_at,
            reason, description
        FROM tickets
        WHERE created_at >= ?
        ORDER BY id DESC
        """,
        (start_iso,),
    ) as cur:
        rows = []
        async for row in cur:
            rows.append(
                {
                    "id": row[0],
                    "kind": row[1],
                    "status": row[2],
                    "priority": row[3],
                    "user_id": row[4],
                    "username": row[5],
                    "assignee_id": row[6],
                    "assignee_name": row[7],
                    "location": row[8],
                    "created_at": row[9],
                    "started_at": row[10],
                    "done_at": row[11],
                    "reason": row[12],
                    "description": row[13],
                }
            )
    return rows

async def cmd_export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = context.application.bot_data["db"]
    uid = update.effective_user.id
    if not await is_admin(db, uid):
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    period = (context.args[0].lower() if context.args else "week").strip()
    if period not in ("week", "month"):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /export [week|month]")
        return
    now = now_local()
    start = now - (timedelta(days=7) if period == "week" else timedelta(days=30))
    rows = await export_rows(db, start_iso=start.isoformat())
    if not rows:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    buf = io.StringIO()
    writer = csv.writer(buf)
    writer.writerow([
        "id",
        "kind",
        "status",
        "priority",
        "user_id",
        "username",
        "assignee_id",
        "assignee_name",
        "location",
        "created_at",
        "started_at",
        "done_at",
        "duration",
        "reason",
        "description",
    ])
    for r in rows:
        dur = human_duration(r["started_at"], r["done_at"])
        writer.writerow([
            r["id"],
            r["kind"],
            r["status"],
            r["priority"],
            r["user_id"],
            r["username"] or "",
            r["assignee_id"] or "",
            r["assignee_name"] or "",
            r.get("location") or "",
            r["created_at"],
            r["started_at"] or "",
            r["done_at"] or "",
            dur,
            r["reason"] or "",
            r["description"].replace("\n", " ")[:500],
        ])
    data = buf.getvalue().encode("utf-8")

    await update.message.reply_document(
        document=InputFile(
            io.BytesIO(data), filename=f"tickets_{period}.csv"
        ),
        caption=f"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞ {period}.",
    )

async def cmd_journal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = context.application.bot_data["db"]
    uid = update.effective_user.id
    if not await is_admin(db, uid):
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    days = ensure_int(context.args[0]) if context.args else 30
    days = days or 30
    since = now_local() - timedelta(days=days)
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–º–æ–Ω—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã "–≤ —Ä–∞–±–æ—Ç–µ", "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞", "–æ—Ç–∫–∞–∑"
    async with db.execute(
        """
        SELECT id, description, location, assignee_name, assignee_id,
               started_at, done_at,
               created_at, updated_at,
               status, reason
        FROM tickets
        WHERE kind='repair'
          AND status IN ('in_work','done','rejected')
          AND updated_at >= ?
        ORDER BY updated_at DESC
        """,
        (since.isoformat(),),
    ) as cur:
        items = await cur.fetchall()

    if not items:
        await update.message.reply_text("–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç.")
        return

    lines = []
    for (
        id_,
        desc,
        loc,
        aname,
        aid,
        started,
        done,
        created,
        updated,
        status,
        reason,
    ) in items:
        who = aname or aid or "‚Äî"
        status_text = {
            "in_work": "‚è± –í —Ä–∞–±–æ—Ç–µ",
            "done": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞",
            "rejected": "üõë –û—Ç–∫–∞–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è",
        }.get(status, status)

        created_s = f"–°–æ–∑–¥–∞–Ω–∞: {fmt_dt(created)}"
        loc_s = f"–ü–æ–º–µ—â–µ–Ω–∏–µ: {loc or '‚Äî'}"

        if status == "in_work":
            dur = (
                human_duration(started, now_local().isoformat())
                if started
                else "‚Äî"
            )
            line = (
                f"#{id_} ‚Ä¢ {status_text} ‚Ä¢ –ò—Å–ø.: {who}\n"
                f"{loc_s}\n"
                f"{created_s} ‚Ä¢ –í–∑—è—Ç–∞: {fmt_dt(started)} ‚Ä¢ "
                f"–î–ª–∏—Ç.: {dur}\n"
                f"{desc}"
            )
        elif status == "done":
            dur = human_duration(started, done)
            line = (
                f"#{id_} ‚Ä¢ {status_text} ‚Ä¢ –ò—Å–ø.: {who}\n"
                f"{loc_s}\n"
                f"{created_s} ‚Ä¢ –í–∑—è—Ç–∞: {fmt_dt(started)} ‚Ä¢ "
                f"–ì–æ—Ç–æ–≤–æ: {fmt_dt(done)} ‚Ä¢ "
                f"–î–ª–∏—Ç.: {dur}\n"
                f"{desc}"
            )
        else:  # rejected
            line = (
                f"#{id_} ‚Ä¢ {status_text} ‚Ä¢ –ò—Å–ø.: {who}\n"
                f"{loc_s}\n"
                f"{created_s} ‚Ä¢ –í–∑—è—Ç–∞: {fmt_dt(started)} ‚Ä¢ "
                f"–û–±–Ω–æ–≤–ª–µ–Ω–∞: {fmt_dt(updated)}\n"
                f"{desc}"
            )
            if reason:
                line += f"\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"

        lines.append(line)

    text_out = "\n\n".join(lines)
    for part in chunk_text(text_out):
        await update.message.reply_text(part)

# ------------------ –°–ü–ò–°–ö–ò / –§–ò–õ–¨–¢–†–´ ------------------

async def cmd_repairs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = context.application.bot_data["db"]
    uid = update.effective_user.id
    status_arg = (context.args[0].lower() if context.args else "new").strip()
    page = ensure_int(context.args[1]) if len(context.args) >= 2 else 1
    page = max(1, page or 1)
    offset = (page - 1) * 20

    status_map = {
        "new": "new",
        "in_work": "in_work",
        "done": "done",
        "all": None,
    }
    stat = status_map.get(status_arg, "new")

    admin = await is_admin(db, uid)
    if admin:
        if stat:
            rows = await find_tickets(
                db,
                kind="repair",
                status=stat,
                limit=20,
                offset=offset,
            )
        else:
            rows = await find_tickets(
                db, kind="repair", limit=20, offset=offset
            )
    else:
        if stat == "new":
            unassigned = await find_tickets(
                db,
                kind="repair",
                status="new",
                unassigned_only=True,
                limit=20,
                offset=offset,
            )
            assigned_to_me = await find_tickets(
                db,
                kind="repair",
                status="new",
                assignee_id=uid,
                limit=20,
                offset=0,
            )
            rows = assigned_to_me + unassigned
        elif stat == "in_work":
            rows = await find_tickets(
                db,
                kind="repair",
                status="in_work",
                assignee_id=uid,
                limit=20,
                offset=offset,
            )
        elif stat == "done":
            rows = await find_tickets(
                db,
                kind="repair",
                status="done",
                assignee_id=uid,
                limit=20,
                offset=offset,
            )
        elif stat is None:  # all
            assigned_new = await find_tickets(
                db,
                kind="repair",
                status="new",
                assignee_id=uid,
                limit=20,
                offset=0,
            )
            in_work = await find_tickets(
                db,
                kind="repair",
                status="in_work",
                assignee_id=uid,
                limit=20,
                offset=0,
            )
            unassigned_new = await find_tickets(
                db,
                kind="repair",
                status="new",
                unassigned_only=True,
                limit=20,
                offset=0,
            )
            rows = assigned_new + in_work + unassigned_new
        else:
            rows = []

    if not rows:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    for t in rows:
        kb = ticket_inline_kb(t, is_admin_flag=admin, me_id=uid)
        await send_ticket_card(context, update.effective_chat.id, t, kb)

async def cmd_me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = context.application.bot_data["db"]
    uid = update.effective_user.id
    status_arg = (context.args[0].lower() if context.args else "in_work").strip()
    page = ensure_int(context.args[1]) if len(context.args) >= 2 else 1
    page = max(1, page or 1)
    offset = (page - 1) * 20

    status_map = {
        "new": "new",
        "in_work": "in_work",
        "done": "done",
        "all": None,
    }
    stat = status_map.get(status_arg, "in_work")

    if stat:
        rows = await find_tickets(
            db,
            kind="repair",
            status=stat,
            assignee_id=uid,
            limit=20,
            offset=offset,
        )
    else:
        rows = await find_tickets(
            db,
            kind="repair",
            assignee_id=uid,
            limit=20,
            offset=offset,
        )

    if not rows:
        await update.message.reply_text("–ü–æ–∫–∞ –ø—É—Å—Ç–æ.")
        return

    for t in rows:
        kb = ticket_inline_kb(
            t, is_admin_flag=await is_admin(db, uid), me_id=uid
        )
        await send_ticket_card(context, update.effective_chat.id, t, kb)

async def cmd_mypurchases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = context.application.bot_data["db"]
    uid = update.effective_user.id
    page = ensure_int(context.args[0]) if context.args else 1
    page = max(1, page or 1)
    offset = (page - 1) * 20

    rows = await find_tickets(
        db,
        kind="purchase",
        user_id=uid,
        limit=20,
        offset=offset,
    )
    if not rows:
        await update.message.reply_text("–¢–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    for t in rows:
        await send_ticket_card(context, update.effective_chat.id, t, None)

# ------------------ –†–û–õ–ò ------------------

async def cmd_add_tech(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = context.application.bot_data["db"]
    uid = update.effective_user.id
    if not await is_admin(db, uid):
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    if not context.args:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_tech <user_id|@username>\n"
            "(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start.)"
        )
        return
    arg = context.args[0].strip()
    target = ensure_int(arg)
    if not target and arg.startswith("@"):
        target = await db_lookup_uid_by_username(db, arg)
    if not target:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏ —á–∏—Å–ª–æ–≤–æ–π user_id –∏–ª–∏ @username (–ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –±–æ—Ç—É /start)."
        )
        return
    await db_add_user_role(db, target, "tech")
    await update.message.reply_text(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ mechanic (tech)."
    )

async def cmd_roles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = context.application.bot_data["db"]
    admins, techs = await db_list_roles(db)
    text = (
        "–†–æ–ª–∏:\n\n–ê–¥–º–∏–Ω—ã:\n"
        + (", ".join(map(str, admins)) or "‚Äî")
        + "\n\n–ú–µ—Ö–∞–Ω–∏–∫–∏:\n"
        + (", ".join(map(str, techs)) or "‚Äî")
    )
    await update.message.reply_text(text)

# ------------------ CALLBACK –ö–ù–û–ü–ö–ò ------------------

async def cb_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = context.application.bot_data["db"]
    uid = update.effective_user.id
    uname = update.effective_user.username or ""

    query = update.callback_query
    await query.answer()
    data = query.data or ""

    # –º–µ–Ω—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∫—É
    if data.startswith("assign_menu:"):
        if not await is_admin(db, uid):
            await edit_message_text_or_caption(query, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
            return
        admins, techs = await db_list_roles(db)
        kb = []
        row = []
        for i, tech_uid in enumerate(techs, start=1):
            row.append(
                InlineKeyboardButton(
                    f"{tech_uid}", callback_data=f"assign_to:{tech_uid}"
                )
            )
            if i % 3 == 0:
                kb.append(row)
                row = []
        if row:
            kb.append(row)
        kb.append(
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="assign_back")]
        )
        await query.edit_message_reply_markup(
            reply_markup=InlineKeyboardMarkup(kb)
        )
        return

    if data == "assign_back":
        await query.answer(
            "–í—ã–±–µ—Ä–∏ —Ç–µ—Ö–Ω–∏–∫–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ.", show_alert=False
        )
        return

    if data.startswith("assign_to:"):
        if not await is_admin(db, uid):
            await edit_message_text_or_caption(query, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
            return
        tid = extract_ticket_id_from_message(query.message.text or "")
        assignee = ensure_int(data.split(":", 1)[1])
        if not tid or not assignee:
            await query.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞—è–≤–∫—É/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
            )
            return
        await update_ticket(
            db,
            tid,
            assignee_id=assignee,
            assignee_name=str(assignee),
        )
        await edit_message_text_or_caption(
            query,
            (query.message.text or "") + f"\n\n–ù–∞–∑–Ω–∞—á–µ–Ω–æ: {assignee}",
        )
        # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Ö–∞–Ω–∏–∫—É –∫–∞—Ä—Ç–æ—á–∫—É
        try:
            t = await get_ticket(db, tid)
            if t:
                kb_for_tech = ticket_inline_kb(
                    t, is_admin_flag=False, me_id=assignee
                )
                await send_ticket_card(
                    context, assignee, t, kb_for_tech
                )
        except Exception as e:
            log.debug(
                f"Notify assignee {assignee} with card failed: {e}"
            )
        return

    if data.startswith("assign_self:"):
        if not await is_admin(db, uid):
            await edit_message_text_or_caption(query, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
            return
        tid = ensure_int(data.split(":", 1)[1])
        if not tid:
            return
        await update_ticket(
            db,
            tid,
            assignee_id=uid,
            assignee_name=f"@{uname or uid}",
        )
        await edit_message_text_or_caption(
            query,
            (query.message.text or "")
            + f"\n\n–ù–∞–∑–Ω–∞—á–µ–Ω–æ: @{uname or uid}",
        )
        try:
            t = await get_ticket(db, tid)
            if t:
                kb_for_me = ticket_inline_kb(
                    t, is_admin_flag=False, me_id=uid
                )
                await send_ticket_card(context, uid, t, kb_for_me)
        except Exception as e:
            log.debug(f"Notify self with card failed: {e}")
        return

    if data.startswith("prio:"):
        if not await is_admin(db, uid):
            await edit_message_text_or_caption(query, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
            return
        tid = ensure_int(data.split(":", 1)[1])
        t = await get_ticket(db, tid)
        if not t:
            await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        cur = t["priority"]
        try:
            idx = PRIORITIES.index(cur)
            new = PRIORITIES[min(idx + 1, len(PRIORITIES) - 1)]
        except Exception:
            new = "normal"
        await update_ticket(db, tid, priority=new)
        await edit_message_text_or_caption(
            query,
            (query.message.text or "") + f"\n\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {new}",
        )
        return

    if data.startswith("to_work:"):
        tid = ensure_int(data.split(":", 1)[1])
        if not tid:
            return
        t = await get_ticket(db, tid)
        if not t or t["kind"] != "repair":
            await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞—è–≤–∫–∞.")
            return
        if t["status"] != "new":
            await query.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –Ω–µ –Ω–æ–≤–∞—è.")
            return

        # –∑–∞—â–∏—Ç–∞: –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä –∞–¥–º–∏–Ω, –º–µ—Ö–∞–Ω–∏–∫-—Å–∞–º –Ω–µ –¥–æ–ª–∂–µ–Ω –±—Ä–∞—Ç—å –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        author_is_admin = await is_admin(db, t["user_id"])
        if (
            author_is_admin
            and not await is_admin(db, uid)
            and not t["assignee_id"]
        ):
            await query.answer(
                "–≠—Ç—É –∑–∞—è–≤–∫—É –¥–æ–ª–∂–µ–Ω —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥–º–∏–Ω."
            )
            return

        if (
            t["assignee_id"]
            and t["assignee_id"] != uid
            and not await is_admin(db, uid)
        ):
            await query.answer("–ó–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥—Ä—É–≥–æ–º—É.")
            return

        now_iso = now_local().isoformat()
        if not t["assignee_id"]:
            await update_ticket(
                db,
                tid,
                assignee_id=uid,
                assignee_name=f"@{uname or uid}",
            )

        await update_ticket(
            db,
            tid,
            status="in_work",
            started_at=t["started_at"] or now_iso,
        )

        await edit_message_text_or_caption(
            query, (query.message.text or "") + "\n\n–°—Ç–∞—Ç—É—Å: ‚è± –í —Ä–∞–±–æ—Ç–µ"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞, —á—Ç–æ –≤–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É
        try:
            await context.bot.send_message(
                chat_id=t["user_id"],
                text=(
                    f"–¢–≤–æ—è –∑–∞—è–≤–∫–∞ #{tid} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –º–µ—Ö–∞–Ω–∏–∫–æ–º "
                    f"@{uname or uid}."
                ),
            )
        except Exception as e:
            log.debug(
                f"Notify author start-work failed: {e}"
            )

        return

    if data.startswith("done:"):
        tid = ensure_int(data.split(":", 1)[1])
        t = await get_ticket(db, tid)
        if not t or t["kind"] != "repair":
            await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞—è–≤–∫–∞.")
            return
        # –∑–∞–∫—Ä—ã–≤–∞—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        if t.get("assignee_id") != uid:
            await query.answer(
                "–¢–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É."
            )
            return

        # –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ/—Ç–µ–∫—Å—Ç–∞
        context.user_data[UD_MODE] = "await_done_photo"
        context.user_data[UD_DONE_CTX] = tid

        await edit_message_text_or_caption(
            query,
            (query.message.text or "")
            + "\n\n–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–≥–æ—Ç–æ–≤–æ'.",
        )
        return

    if data.startswith("decline:"):
        tid = ensure_int(data.split(":", 1)[1])
        if not tid:
            return
        t = await get_ticket(db, tid)
        if not t or t["kind"] != "repair":
            await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞—è–≤–∫–∞.")
            return
        if t.get("assignee_id") != uid:
            await query.answer(
                "–¢–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–∫–∞–∑–∞—Ç—å –ø–æ –∑–∞—è–≤–∫–µ."
            )
            return
        context.user_data[UD_MODE] = "await_reason"
        context.user_data[UD_REASON_CONTEXT] = {
            "action": "decline_repair",
            "ticket_id": tid,
        }
        await edit_message_text_or_caption(
            query,
            (query.message.text or "")
            + "\n\n–ù–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        )
        return

    if data.startswith("need_buy:"):
        tid = ensure_int(data.split(":", 1)[1])
        t = await get_ticket(db, tid)
        if not t or t["kind"] != "repair":
            await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞—è–≤–∫–∞.")
            return
        # —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω
        if t.get("assignee_id") != uid and not await is_admin(db, uid):
            await query.answer(
                "–¢–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∑–∞–∫—É–ø–∫—É."
            )
            return

        context.user_data[UD_MODE] = "await_buy_desc"
        context.user_data[UD_BUY_CONTEXT] = {"ticket_id": tid}
        await edit_message_text_or_caption(
            query,
            (query.message.text or "")
            + "\n\n–ß—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–∫—É–ø–∏—Ç—å? –£–∫–∞–∂–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø—Ä–∏—á–∏–Ω—É.",
        )
        return

    if data.startswith("cancel:"):
        # –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø–æ–∫—É–ø–∫–∞–º–∏ (–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å)
        if not await is_admin(db, uid):
            await edit_message_text_or_caption(query, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
            return
        tid = ensure_int(data.split(":", 1)[1])
        context.user_data[UD_MODE] = "await_reason"
        context.user_data[UD_REASON_CONTEXT] = {
            "action": "cancel",
            "ticket_id": tid,
        }
        await edit_message_text_or_caption(
            query,
            (query.message.text or "")
            + "\n\n–ù–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        )
        return

    if data.startswith("approve:"):
        if not await is_admin(db, uid):
            await edit_message_text_or_caption(query, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
            return
        tid = ensure_int(data.split(":", 1)[1])
        await update_ticket(db, tid, status="approved")
        await edit_message_text_or_caption(
            query,
            (query.message.text or "") + "\n\n–°—Ç–∞—Ç—É—Å: ‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞",
        )
        t = await get_ticket(db, tid)
        if t:
            try:
                await context.bot.send_message(
                    chat_id=t["user_id"],
                    text=(
                        f"–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É #{tid} –æ–¥–æ–±—Ä–µ–Ω–∞."
                    ),
                )
            except Exception as e:
                log.debug(f"Notify author approve failed: {e}")
        return

    if data.startswith("reject:"):
        if not await is_admin(db, uid):
            await edit_message_text_or_caption(query, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
            return
        tid = ensure_int(data.split(":", 1)[1])
        context.user_data[UD_MODE] = "await_reason"
        context.user_data[UD_REASON_CONTEXT] = {
            "action": "reject",
            "ticket_id": tid,
        }
        await edit_message_text_or_caption(
            query,
            (query.message.text or "")
            + "\n\n–ù–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        )
        return

def extract_ticket_id_from_message(text: str) -> int | None:
    # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ assign_to
    # –ø–∞—Ä—Å–∏–º –ø–µ—Ä–≤—ã–π #<—á–∏—Å–ª–æ>
    try:
        parts = text.split("#", 1)
        if len(parts) < 2:
            return None
        tail = parts[1]
        num = ""
        for ch in tail:
            if ch.isdigit():
                num += ch
            else:
                break
        return int(num) if num else None
    except Exception:
        return None

# ------------------ –î–û–ü. –í–í–û–î –¢–ï–ö–°–¢–û–í–û–ô –ü–†–ò–ß–ò–ù–´ ------------------

async def handle_reason_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = context.application.bot_data["db"]
    reason_text = (update.message.text or "").strip()
    if not reason_text:
        await update.message.reply_text(
            "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º."
        )
        return

    ctx = context.user_data.get(UD_REASON_CONTEXT) or {}
    tid = ctx.get("ticket_id")
    action = ctx.get("action")

    if not tid or action not in ("cancel", "reject", "decline_repair"):
        await update.message.reply_text(
            "–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç–µ—Ä—è–Ω. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."
        )
        context.user_data[UD_MODE] = None
        context.user_data[UD_REASON_CONTEXT] = None
        return

    t = await get_ticket(db, tid)
    if not t:
        await update.message.reply_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        context.user_data[UD_MODE] = None
        context.user_data[UD_REASON_CONTEXT] = None
        return

    # –æ—Ç–º–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º
    if action == "cancel":
        await update_ticket(
            db, tid, status="canceled", reason=reason_text
        )
        await update.message.reply_text(
            f"–ó–∞—è–≤–∫–∞ #{tid} –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: {reason_text}"
        )

    # –º–µ—Ö–∞–Ω–∏–∫ –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Ä–µ–º–æ–Ω—Ç–∞
    elif action == "decline_repair":
        await update_ticket(
            db,
            tid,
            status="rejected",
            reason=reason_text,
        )
        await update.message.reply_text(
            f"–ó–∞—è–≤–∫–∞ #{tid} ‚Äî –æ—Ç–∫–∞–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {reason_text}"
        )
        # —É–≤–µ–¥–æ–º–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –æ—Ç–∫–∞–∑–∞
        try:
            await context.bot.send_message(
                chat_id=t["user_id"],
                text=(
                    f"–ü–æ –∑–∞—è–≤–∫–µ #{tid} –º–µ—Ö–∞–Ω–∏–∫ –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∫–∞–∑.\n"
                    f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {reason_text}"
                ),
            )
        except Exception as e:
            log.debug(
                f"Notify author decline failed: {e}"
            )

    # –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∞–¥–º–∏–Ω–æ–º
    else:  # reject
        await update_ticket(
            db,
            tid,
            status="rejected",
            reason=reason_text,
        )
        await update.message.reply_text(
            f"–ó–∞—è–≤–∫–∞ #{tid} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: {reason_text}"
        )
        try:
            await context.bot.send_message(
                chat_id=t["user_id"],
                text=(
                    f"–¢–≤–æ—è –∑–∞—è–≤–∫–∞ #{tid} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {reason_text}"
                ),
            )
        except Exception as e:
            log.debug(
                f"Notify author reject failed: {e}"
            )

    context.user_data[UD_MODE] = None
    context.user_data[UD_REASON_CONTEXT] = None

# ------------------ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ê–ú ------------------

async def notify_admins(context: ContextTypes.DEFAULT_TYPE, text: str):
    db = context.application.bot_data["db"]
    admins, _ = await db_list_roles(db)
    for aid in admins:
        try:
            await context.bot.send_message(chat_id=aid, text=text)
        except Exception as e:
            log.debug(f"Notify admin {aid} failed: {e}")

async def notify_admins_ticket(context: ContextTypes.DEFAULT_TYPE, author_uid: int):
    """
    –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É –∞–≤—Ç–æ—Ä–∞ –∏ –∫–∏–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º,
    —Å —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å.
    """
    db = context.application.bot_data["db"]
    rows = await find_tickets(db, user_id=author_uid, limit=1, offset=0)
    if not rows:
        return
    t = rows[0]
    admins, _ = await db_list_roles(db)
    kb = ticket_inline_kb(t, is_admin_flag=True, me_id=0)
    for aid in admins:
        await send_ticket_card(context, aid, t, kb)

# ------------------ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø / MAIN ------------------

def register_handlers(app: Application):
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("whoami", cmd_whoami))

    app.add_handler(CommandHandler("find", cmd_find))
    app.add_handler(CommandHandler("export", cmd_export))
    app.add_handler(CommandHandler("journal", cmd_journal))

    app.add_handler(CommandHandler("repairs", cmd_repairs))
    app.add_handler(CommandHandler("me", cmd_me))
    app.add_handler(CommandHandler("mypurchases", cmd_mypurchases))

    app.add_handler(CommandHandler("add_tech", cmd_add_tech))
    app.add_handler(CommandHandler("roles", cmd_roles))

    app.add_handler(CallbackQueryHandler(cb_handler))

    # –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é: –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç, –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–º–æ–Ω—Ç —Å —Ñ–æ—Ç–æ "–ø–æ—Å–ª–µ"
    app.add_handler(MessageHandler(filters.PHOTO & filters.Caption(True), on_photo_with_caption))
    # –õ—é–±–æ–π –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–∫–Ω–æ–ø–∫–∏, –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫, –ø—Ä–∏—á–∏–Ω—ã –∏ —Ç.–¥.)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text_button))

async def on_startup(app: Application):
    await init_db(app)
    log.info("ITS bot running...")

async def on_shutdown(app: Application):
    await db_close(app)
    log.info("ITS bot stopped.")

def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    register_handlers(application)
    application.post_init = on_startup
    application.post_shutdown = on_shutdown
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
